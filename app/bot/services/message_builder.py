# app/bot/services/message_builder.py
from app.models import Order, OrderStatus

DIVIDER = '‚Äî' * 20


def get_status_emoji(status: OrderStatus) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    return {
        OrderStatus.NEW: "üÜï",
        OrderStatus.WAITING_PAYMENT: "‚è≥",
        OrderStatus.PAID: "‚úÖ",
        OrderStatus.CANCELLED: "‚ùå"
    }[status]


def get_status_text(status: OrderStatus) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    return {
        OrderStatus.NEW: "–ù–æ–≤–∏–π",
        OrderStatus.WAITING_PAYMENT: "–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É",
        OrderStatus.PAID: "–û–ø–ª–∞—á–µ–Ω–æ",
        OrderStatus.CANCELLED: "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
    }[status]


def format_phone_compact(e164: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–∫—Ç–Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not e164:
        return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    return e164  # –ü—Ä–æ—Å—Ç–æ E.164 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: +380960790247


def build_order_message(order: Order, detailed: bool = False) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    order_no = order.order_number or order.id
    status_emoji = get_status_emoji(order.status)
    status_text = get_status_text(order.status)

    # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    customer_name = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

    # –¢–µ–ª–µ—Ñ–æ–Ω –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤
    phone = format_phone_compact(order.customer_phone_e164)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"""üì¶ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_no}</b> ‚Ä¢ {status_emoji} {status_text}\n"
        f"{DIVIDER}\n"
        f"üë§ {customer_name}\n"
        f"üì± {phone}"""
    )

    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if detailed and order.raw_json:
        data = order.raw_json

        message += f"\n{DIVIDER}"

        # –¢–æ–≤–∞—Ä—ã
        items = data.get("line_items", [])
        if items:
            message += "\nüõç <b>–¢–æ–≤–∞—Ä–∏:</b>"
            total_sum = 0
            for item in items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                title = item.get("title", "")
                qty = item.get("quantity", 0)
                price = float(item.get("price", 0))
                total_sum += price * qty
                message += f"\n‚Ä¢ {title} x{qty} - {price:.2f} UAH"

            if len(items) > 5:
                message += f"\n<i>...—Ç–∞ —â–µ {len(items) - 5} —Ç–æ–≤–∞—Ä—ñ–≤</i>"

        # –î–æ—Å—Ç–∞–≤–∫–∞
        shipping = data.get("shipping_address", {})
        if shipping:
            city = shipping.get("city", "")
            address = shipping.get("address1", "")
            if city or address:
                delivery_parts = [p for p in [city, address] if p]
                message += f"\nüìç <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {', '.join(delivery_parts)}"

        # –°—É–º–º–∞
        total = data.get("total_price", "")
        currency = data.get("currency", "UAH")
        if total:
            message += f"\nüí∞ <b>–°—É–º–∞:</b> {total} {currency}"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if order.comment or order.reminder_at or order.processed_by_username:
        message += f"\n{DIVIDER}"

        if order.comment:
            message += f"\nüí¨ <i>–ö–æ–º–µ–Ω—Ç–∞—Ä: {order.comment}</i>"

        if order.reminder_at:
            reminder_time = order.reminder_at.strftime("%d.%m %H:%M")
            message += f"\n‚è∞ <i>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder_time}</i>"

        if order.processed_by_username:
            message += f"\nüë®‚Äçüíº <i>–ú–µ–Ω–µ–¥–∂–µ—Ä: @{order.processed_by_username}</i>"

    return message