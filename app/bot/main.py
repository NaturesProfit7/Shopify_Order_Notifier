# app/bot/main.py
import asyncio
import os
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from app.bot.routers import commands, callbacks
from app.db import get_session
from app.models import Order, OrderStatus

import logging

logger = logging.getLogger(__name__)


class TelegramBot:
    """Singleton –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º"""
    _instance: Optional['TelegramBot'] = None
    _lock = asyncio.Lock()

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            raise RuntimeError("TELEGRAM_BOT_TOKEN not set")

        self.bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        self.dp = Dispatcher()
        self.scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
        self.chat_id = os.getenv("TELEGRAM_TARGET_CHAT_ID")

        # Polling task
        self.polling_task: Optional[asyncio.Task] = None

        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        allowed_ids = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "")
        self.allowed_user_ids = [int(uid.strip()) for uid in allowed_ids.split(",") if uid.strip()]

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self._register_handlers()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self._setup_scheduler()

        self.initialized = True
        logger.info("TelegramBot initialized")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        self.dp.include_router(commands.router)
        self.dp.include_router(callbacks.router)
        logger.info("Handlers registered")

    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ù–û–í–´–• –∑–∞–∫–∞–∑–æ–≤ –ö–ê–ñ–î–´–ô –ß–ê–°
        self.scheduler.add_job(
            self._check_new_orders,
            trigger=IntervalTrigger(hours=1),  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 30 –º–∏–Ω—É—Ç –Ω–∞ 1 —á–∞—Å
            id="check_new_orders",
            replace_existing=True
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
        self.scheduler.add_job(
            self._check_reminders,
            trigger=IntervalTrigger(minutes=5),
            id="check_reminders",
            replace_existing=True
        )
        logger.info("Scheduler configured: check new orders every hour, check reminders every 5 min")

    async def _check_new_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW - –∫–∞–∂–¥—ã–π —á–∞—Å"""
        try:
            with get_session() as session:
                # –ù–∞—Ö–æ–¥–∏–º –í–°–ï –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ NEW
                new_orders = session.query(Order).filter(
                    Order.status == OrderStatus.NEW
                ).order_by(Order.created_at.desc()).all()

                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if not new_orders or not self.chat_id:
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üÜï <b>–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ({len(new_orders)} —à—Ç):</b>\n\n"

                for order in new_orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    order_no = order.order_number or order.id
                    customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    elapsed = datetime.utcnow() - order.created_at
                    hours = int(elapsed.total_seconds() // 3600)
                    minutes = int((elapsed.total_seconds() % 3600) // 60)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
                    if hours >= 2:
                        urgency = "üî•"  # –°—Ä–æ—á–Ω–æ - –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤
                    elif hours >= 1:
                        urgency = "‚ö†Ô∏è"  # –í–Ω–∏–º–∞–Ω–∏–µ - –±–æ–ª–µ–µ —á–∞—Å–∞
                    else:
                        urgency = "üìç"  # –û–±—ã—á–Ω—ã–π

                    message += f"{urgency} ‚Ññ{order_no} ‚Ä¢ {customer}"

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
                    if hours > 0:
                        message += f" ({hours}–≥ {minutes}—Ö–≤ —Ç–æ–º—É)\n"
                    else:
                        message += f" ({minutes}—Ö–≤ —Ç–æ–º—É)\n"

                if len(new_orders) > 10:
                    message += f"\n<i>...—Ç–∞ —â–µ {len(new_orders) - 10} –∑–∞–º–æ–≤–ª–µ–Ω—å</i>\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ",
                        callback_data="orders:list:pending:offset=0"
                    )
                ]])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self.bot.send_message(
                    self.chat_id,
                    message,
                    reply_markup=keyboard
                )
                logger.info(f"Sent hourly notification for {len(new_orders)} new orders")

        except Exception as e:
            logger.error(f"Error checking new orders: {e}", exc_info=True)

    async def _check_unprocessed_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        try:
            with get_session() as session:
                # –ó–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ NEW
                threshold = datetime.utcnow() - timedelta(minutes=30)
                unprocessed = session.query(Order).filter(
                    Order.status == OrderStatus.NEW,
                    Order.created_at < threshold,
                    (Order.last_reminder_sent.is_(None)) |
                    (Order.last_reminder_sent < datetime.utcnow() - timedelta(hours=2))
                ).limit(5).all()

                if unprocessed and self.chat_id:
                    message = "‚ö†Ô∏è <b>–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (30+ —Ö–≤):</b>\n\n"
                    for order in unprocessed:
                        order_no = order.order_number or order.id
                        customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip()
                        elapsed = datetime.utcnow() - order.created_at
                        hours = int(elapsed.total_seconds() // 3600)
                        minutes = int((elapsed.total_seconds() % 3600) // 60)

                        message += f"‚Ä¢ ‚Ññ{order_no} - {customer or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}"
                        if hours > 0:
                            message += f" ({hours}–≥ {minutes}—Ö–≤ —Ç–æ–º—É)\n"
                        else:
                            message += f" ({minutes}—Ö–≤ —Ç–æ–º—É)\n"

                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        order.last_reminder_sent = datetime.utcnow()

                    session.commit()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.bot.send_message(self.chat_id, message)
                    logger.info(f"Sent reminder for {len(unprocessed)} unprocessed orders")

        except Exception as e:
            logger.error(f"Error checking unprocessed orders: {e}", exc_info=True)

    async def _check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–µ—Ä–µ–∑–≤–æ–Ω–µ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
        try:
            with get_session() as session:
                now = datetime.utcnow()
                reminders = session.query(Order).filter(
                    Order.reminder_at.isnot(None),
                    Order.reminder_at <= now
                ).limit(10).all()

                for order in reminders:
                    try:
                        order_no = order.order_number or order.id
                        customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤
                        phone = order.customer_phone_e164 if order.customer_phone_e164 else "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

                        message = (
                            f"üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–∑–≤—ñ–Ω–æ–∫!</b>\n\n"
                            f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_no}\n"
                            f"üë§ –ö–ª—ñ—î–Ω—Ç: {customer}\n"
                            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                        )

                        if order.comment:
                            message += f"\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: <i>{order.comment}</i>"

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É
                        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(
                                text="üì¶ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                callback_data=f"order:{order.id}:view"
                            )
                        ]])

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        if self.chat_id:
                            await self.bot.send_message(
                                self.chat_id,
                                message,
                                reply_markup=keyboard
                            )
                            logger.info(f"Sent reminder for order {order_no}")

                        # –û—á–∏—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        order.reminder_at = None

                    except Exception as e:
                        logger.error(f"Error sending reminder for order {order.id}: {e}")

                session.commit()

        except Exception as e:
            logger.error(f"Error checking reminders: {e}", exc_info=True)

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            logger.info("Starting bot polling...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if not self.scheduler.running:
                self.scheduler.start()
                logger.info("Scheduler started")

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot, allowed_updates=['message', 'callback_query'])

        except Exception as e:
            logger.error(f"Error in bot polling: {e}", exc_info=True)
            raise

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ (non-blocking)"""
        async with self._lock:
            if self.polling_task and not self.polling_task.done():
                logger.warning("Bot is already running")
                return

            # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è polling
            self.polling_task = asyncio.create_task(self.start_polling())
            logger.info("Bot polling task created")

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            await asyncio.sleep(1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            try:
                me = await self.bot.get_me()
                logger.info(f"Bot started successfully: @{me.username}")
            except Exception as e:
                logger.error(f"Failed to start bot: {e}")
                if self.polling_task:
                    self.polling_task.cancel()
                raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        async with self._lock:
            logger.info("Stopping Telegram bot...")

            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
                if self.polling_task and not self.polling_task.done():
                    self.polling_task.cancel()
                    try:
                        await self.polling_task
                    except asyncio.CancelledError:
                        pass

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
                await self.dp.stop_polling()

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                if self.scheduler.running:
                    self.scheduler.shutdown(wait=False)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                await self.bot.session.close()

                logger.info("Bot stopped successfully")

            except Exception as e:
                logger.error(f"Error stopping bot: {e}", exc_info=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
_bot_instance: Optional[TelegramBot] = None


def get_bot_instance() -> TelegramBot:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global _bot_instance
    if _bot_instance is None:
        _bot_instance = TelegramBot()
    return _bot_instance


async def start_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–∑ FastAPI lifespan"""
    bot = get_bot_instance()
    await bot.start()


async def stop_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    global _bot_instance
    if _bot_instance:
        await _bot_instance.stop()
        _bot_instance = None


def get_bot() -> Optional[Bot]:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    instance = get_bot_instance()
    return instance.bot if instance else None