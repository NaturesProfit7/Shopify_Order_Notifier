# app/bot/main.py
import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from app.bot.routers import commands, callbacks
from app.db import get_session
from app.models import Order, OrderStatus

import logging

logger = logging.getLogger(__name__)


class TelegramBot:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            raise RuntimeError("TELEGRAM_BOT_TOKEN not set")

        self.bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        self.dp = Dispatcher()
        self.scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
        self.chat_id = os.getenv("TELEGRAM_TARGET_CHAT_ID")

        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        allowed_ids = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "")
        self.allowed_user_ids = [int(uid.strip()) for uid in allowed_ids.split(",") if uid.strip()]

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self._register_handlers()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self._setup_scheduler()

        self.initialized = True

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        self.dp.include_router(commands.router)
        self.dp.include_router(callbacks.router)

    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self._check_unprocessed_orders,
            trigger=IntervalTrigger(minutes=30),
            id="check_unprocessed",
            replace_existing=True
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self._check_reminders,
            trigger=IntervalTrigger(minutes=5),
            id="check_reminders",
            replace_existing=True
        )

    async def _check_unprocessed_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        try:
            with get_session() as session:
                # –ó–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ NEW
                threshold = datetime.utcnow() - timedelta(minutes=30)
                unprocessed = session.query(Order).filter(
                    Order.status == OrderStatus.NEW,
                    Order.created_at < threshold,
                    (Order.last_reminder_sent.is_(None)) |
                    (Order.last_reminder_sent < datetime.utcnow() - timedelta(minutes=30))
                ).all()

                if unprocessed:
                    message = "‚ö†Ô∏è <b>–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
                    for order in unprocessed:
                        order_no = order.order_number or order.id
                        customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip()
                        message += f"‚Ä¢ ‚Ññ{order_no} - {customer or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n"

                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        order.last_reminder_sent = datetime.utcnow()

                    session.commit()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.bot.send_message(self.chat_id, message)

        except Exception as e:
            logger.error(f"Error checking unprocessed orders: {e}")

    async def _check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–µ—Ä–µ–∑–≤–æ–Ω–µ"""
        try:
            with get_session() as session:
                now = datetime.utcnow()
                reminders = session.query(Order).filter(
                    Order.reminder_at.isnot(None),
                    Order.reminder_at <= now
                ).all()

                for order in reminders:
                    order_no = order.order_number or order.id
                    customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip()
                    phone = order.customer_phone_e164 or "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

                    message = (
                        f"üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–∑–≤—ñ–Ω–æ–∫!</b>\n\n"
                        f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_no}\n"
                        f"–ö–ª—ñ—î–Ω—Ç: {customer or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                    )

                    if order.comment:
                        message += f"\n\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order.comment}"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    await self.bot.send_message(self.chat_id, message)

                    # –û—á–∏—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    order.reminder_at = None
                    session.commit()

        except Exception as e:
            logger.error(f"Error checking reminders: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Telegram bot...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.dp.start_polling(self.bot)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Telegram bot...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.shutdown(wait=True)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        await self.dp.stop_polling()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–æ—Ç–∞
        await self.bot.session.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance: TelegramBot = None


def get_bot_instance() -> TelegramBot:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot_instance
    if bot_instance is None:
        bot_instance = TelegramBot()
    return bot_instance


async def start_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–∑ FastAPI"""
    bot = get_bot_instance()
    await bot.start()


async def stop_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    global bot_instance
    if bot_instance:
        await bot_instance.stop()
        bot_instance = None


def get_bot() -> Bot:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    instance = get_bot_instance()
    return instance.bot if instance else None