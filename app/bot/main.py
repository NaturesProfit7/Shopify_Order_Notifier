# app/bot/main.py - –° –†–ï–ì–ò–°–¢–†–ê–¶–ò–ï–ô WEBHOOK –†–û–£–¢–ï–†–ê
import asyncio
import os
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger
import pytz

from app.db import get_session
from app.models import Order, OrderStatus

import logging

logger = logging.getLogger(__name__)


class TelegramBot:
    """Singleton –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º"""
    _instance: Optional['TelegramBot'] = None
    _lock = asyncio.Lock()

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            raise RuntimeError("TELEGRAM_BOT_TOKEN not set")

        self.bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú MemoryStorage –¥–ª—è FSM
        storage = MemoryStorage()
        self.dp = Dispatcher(storage=storage)

        self.scheduler = AsyncIOScheduler(timezone="Europe/Kiev")
        self.chat_id = os.getenv("TELEGRAM_TARGET_CHAT_ID")

        # Polling task
        self.polling_task: Optional[asyncio.Task] = None

        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        allowed_ids = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "")
        self.allowed_user_ids = [int(uid.strip()) for uid in allowed_ids.split(",") if uid.strip()]

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self._register_handlers()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self._setup_scheduler()

        self.initialized = True
        logger.info("TelegramBot initialized with webhook router support")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        try:
            logger.info("Starting handler registration...")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
            from app.bot.routers import commands, navigation, orders, management, test_commands, webhook

            logger.info("All routers imported successfully")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            # –í–ê–ñ–ù–û: webhook –ø–µ—Ä–≤—ã–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä–∏—Ç–∏"
            self.dp.include_router(webhook.router)
            logger.info("‚úÖ Webhook router registered (priority)")

            # –í–ê–ñ–ù–û: management –≤—Ç–æ—Ä—ã–º –¥–ª—è FSM
            self.dp.include_router(management.router)
            logger.info("‚úÖ Management router registered (FSM)")

            self.dp.include_router(test_commands.router)
            logger.info("‚úÖ Test commands router registered")

            self.dp.include_router(commands.router)
            logger.info("‚úÖ Commands router registered")

            self.dp.include_router(navigation.router)
            logger.info("‚úÖ Navigation router registered")

            self.dp.include_router(orders.router)
            logger.info("‚úÖ Orders router registered")

            logger.info("All handlers registered successfully!")

        except Exception as e:
            logger.error(f"Error registering handlers: {e}", exc_info=True)
            raise

    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ù–û–í–´–• –∑–∞–∫–∞–∑–æ–≤ –ö–ê–ñ–î–´–ô –ß–ê–° (10:00-22:00)
        self.scheduler.add_job(
            self._check_new_orders,
            trigger=IntervalTrigger(hours=1),
            id="check_new_orders",
            replace_existing=True
        )

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self._check_reminders,
            trigger=IntervalTrigger(minutes=5),
            id="check_reminders",
            replace_existing=True
        )

        # 3. –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤ 10:30
        self.scheduler.add_job(
            self._check_payment_reminders,
            trigger=CronTrigger(hour=10, minute=30, timezone="Europe/Kiev"),
            id="payment_reminders",
            replace_existing=True
        )

        logger.info("Scheduler configured with 3 reminder types")

    def _is_working_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ 10:00-22:00 –ö–∏–µ–≤"""
        kiev_tz = pytz.timezone("Europe/Kiev")
        now_kiev = datetime.now(kiev_tz)
        hour = now_kiev.hour

        return 10 <= hour < 22

    async def _check_new_orders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW - –∫–∞–∂–¥—ã–π —á–∞—Å (10:00-22:00)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if not self._is_working_hours():
                logger.info("Skipping new orders check - outside working hours")
                return

            with get_session() as session:
                new_orders = session.query(Order).filter(
                    Order.status == OrderStatus.NEW
                ).order_by(Order.created_at.desc()).all()

                if not new_orders or not self.chat_id:
                    logger.info("No new orders to remind about")
                    return

                message = f"üÜï <b>–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ({len(new_orders)} —à—Ç):</b>\n\n"

                for order in new_orders[:15]:
                    order_no = order.order_number or order.id
                    customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

                    now_utc = datetime.utcnow()

                    if order.created_at.tzinfo is not None:
                        order_created_utc = order.created_at.astimezone(pytz.UTC).replace(tzinfo=None)
                    else:
                        order_created_utc = order.created_at

                    elapsed = now_utc - order_created_utc
                    hours = int(elapsed.total_seconds() // 3600)
                    minutes = int((elapsed.total_seconds() % 3600) // 60)

                    if hours >= 3:
                        urgency = "üö®"
                    elif hours >= 2:
                        urgency = "‚ö†Ô∏è"
                    elif hours >= 1:
                        urgency = "üî•"
                    else:
                        urgency = "üìç"

                    message += f"{urgency} ‚Ññ{order_no} ‚Ä¢ {customer}"

                    if hours > 0:
                        message += f" ({hours}–≥ {minutes}—Ö–≤ —Ç–æ–º—É)\n"
                    else:
                        message += f" ({minutes}—Ö–≤ —Ç–æ–º—É)\n"

                if len(new_orders) > 15:
                    message += f"\n<i>...—Ç–∞ —â–µ {len(new_orders) - 15} –∑–∞–º–æ–≤–ª–µ–Ω—å</i>\n"

                message += f"\nüöÄ <i>–ß–∞—Å –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫–∏ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</i>"

                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ",
                        callback_data="orders:list:new:offset=0"
                    )
                ]])

                await self.bot.send_message(
                    self.chat_id,
                    message,
                    reply_markup=keyboard
                )
                logger.info(f"Sent hourly NEW orders notification: {len(new_orders)} orders")

        except Exception as e:
            logger.error(f"Error checking new orders: {e}", exc_info=True)

    async def _check_payment_reminders(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤ 10:30"""
        try:
            with get_session() as session:
                waiting_orders = session.query(Order).filter(
                    Order.status == OrderStatus.WAITING_PAYMENT
                ).order_by(Order.updated_at.desc()).all()

                if not waiting_orders or not self.chat_id:
                    logger.info("No payment reminders needed")
                    return

                message = f"üí∞ <b>–û—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É ({len(waiting_orders)} —à—Ç):</b>\n\n"

                for order in waiting_orders[:15]:
                    order_no = order.order_number or order.id
                    customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

                    now_utc = datetime.utcnow()

                    if order.waiting_payment_since:
                        if order.waiting_payment_since.tzinfo is not None:
                            waiting_since_utc = order.waiting_payment_since.astimezone(pytz.UTC).replace(tzinfo=None)
                        else:
                            waiting_since_utc = order.waiting_payment_since
                    else:
                        if order.updated_at.tzinfo is not None:
                            waiting_since_utc = order.updated_at.astimezone(pytz.UTC).replace(tzinfo=None)
                        else:
                            waiting_since_utc = order.updated_at

                    elapsed = now_utc - waiting_since_utc
                    hours = int(elapsed.total_seconds() // 3600)
                    days = hours // 24

                    if days >= 2:
                        urgency = "üö®"
                    elif days >= 1:
                        urgency = "‚ö†Ô∏è"
                    elif hours >= 12:
                        urgency = "üî•"
                    else:
                        urgency = "üìç"

                    message += f"{urgency} ‚Ññ{order_no} ‚Ä¢ {customer}"

                    if days > 0:
                        message += f" ({days} –¥–Ω.)\n"
                    elif hours > 0:
                        message += f" ({hours} –≥–æ–¥.)\n"
                    else:
                        message += " (—Å—å–æ–≥–æ–¥–Ω—ñ)\n"

                if len(waiting_orders) > 15:
                    message += f"\n<i>...—Ç–∞ —â–µ {len(waiting_orders) - 15} –∑–∞–º–æ–≤–ª–µ–Ω—å</i>\n"

                message += f"\n‚ö° <i>–ß–∞—Å –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ —É–≥–æ–¥–∏!</i>"

                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üí≥ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É",
                        callback_data="orders:list:waiting:offset=0"
                    )
                ]])

                await self.bot.send_message(
                    self.chat_id,
                    message,
                    reply_markup=keyboard
                )
                logger.info(f"Sent daily PAYMENT reminders: {len(waiting_orders)} orders")

        except Exception as e:
            logger.error(f"Error checking payment reminders: {e}", exc_info=True)

    async def _check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–µ—Ä–µ–∑–≤–æ–Ω–µ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
        try:
            with get_session() as session:
                now = datetime.utcnow()
                reminders = session.query(Order).filter(
                    Order.reminder_at.isnot(None),
                    Order.reminder_at <= now
                ).limit(10).all()

                for order in reminders:
                    try:
                        order_no = order.order_number or order.id
                        customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
                        phone = order.customer_phone_e164 if order.customer_phone_e164 else "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

                        message = (
                            f"üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–∑–≤—ñ–Ω–æ–∫!</b>\n\n"
                            f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_no}\n"
                            f"üë§ –ö–ª—ñ—î–Ω—Ç: {customer}\n"
                            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                        )

                        if order.comment:
                            message += f"\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: <i>{order.comment}</i>"

                        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(
                                text="üì¶ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                callback_data=f"order:{order.id}:view"
                            )
                        ]])

                        if self.chat_id:
                            await self.bot.send_message(
                                self.chat_id,
                                message,
                                reply_markup=keyboard
                            )
                            logger.info(f"Sent reminder for order {order_no}")

                        order.reminder_at = None

                    except Exception as e:
                        logger.error(f"Error sending reminder for order {order.id}: {e}")

                session.commit()

        except Exception as e:
            logger.error(f"Error checking reminders: {e}", exc_info=True)

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            logger.info("Starting bot polling...")

            if not self.scheduler.running:
                self.scheduler.start()
                logger.info("Scheduler started")

            await self.dp.start_polling(self.bot, allowed_updates=['message', 'callback_query'])

        except Exception as e:
            logger.error(f"Error in bot polling: {e}", exc_info=True)
            raise

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ (non-blocking)"""
        async with self._lock:
            if self.polling_task and not self.polling_task.done():
                logger.warning("Bot is already running")
                return

            self.polling_task = asyncio.create_task(self.start_polling())
            logger.info("Bot polling task created")

            await asyncio.sleep(1)

            try:
                me = await self.bot.get_me()
                logger.info(f"Bot started successfully: @{me.username}")
            except Exception as e:
                logger.error(f"Failed to start bot: {e}")
                if self.polling_task:
                    self.polling_task.cancel()
                raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        async with self._lock:
            logger.info("Stopping Telegram bot...")

            try:
                if self.polling_task and not self.polling_task.done():
                    self.polling_task.cancel()
                    try:
                        await self.polling_task
                    except asyncio.CancelledError:
                        pass

                await self.dp.stop_polling()

                if self.scheduler.running:
                    self.scheduler.shutdown(wait=False)

                await self.bot.session.close()

                logger.info("Bot stopped successfully")

            except Exception as e:
                logger.error(f"Error stopping bot: {e}", exc_info=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
_bot_instance: Optional[TelegramBot] = None


def get_bot_instance() -> TelegramBot:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global _bot_instance
    if _bot_instance is None:
        _bot_instance = TelegramBot()
    return _bot_instance


async def start_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–∑ FastAPI lifespan"""
    bot = get_bot_instance()
    await bot.start()


async def stop_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    global _bot_instance
    if _bot_instance:
        await _bot_instance.stop()
        _bot_instance = None


def get_bot() -> Optional[Bot]:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    instance = get_bot_instance()
    return instance.bot if instance else None