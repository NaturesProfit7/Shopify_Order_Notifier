# app/bot/routers/webhook.py - –ù–û–í–´–ô –†–û–£–¢–ï–† –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤
"""–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π '–ó–∞–∫—Ä–∏—Ç–∏'"""

from aiogram import Router, F
from aiogram.types import CallbackQuery

from .shared import (
    debug_print,
    get_webhook_messages,
    clear_webhook_messages,
    get_order_file_messages,
    clear_order_file_messages
)

router = Router()


async def cleanup_webhook_order(bot, chat_id: int, order_id: int) -> None:
    """–£–¥–∞–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è webhook –∑–∞–∫–∞–∑–∞: –∫–∞—Ä—Ç–æ—á–∫—É + —Ñ–∞–π–ª—ã"""
    debug_print(f"üßπ WEBHOOK CLEANUP START: order {order_id}")

    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ webhook —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    webhook_messages = get_webhook_messages(order_id)
    debug_print(f"üßπ Found {len(webhook_messages)} webhook messages: {list(webhook_messages)}")

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    from .shared import user_order_files
    all_file_messages = set()

    for user_id in user_order_files:
        file_messages = get_order_file_messages(user_id, order_id)
        all_file_messages.update(file_messages)
        debug_print(f"üßπ User {user_id} has {len(file_messages)} file messages for order {order_id}")

    debug_print(f"üßπ Total file messages to delete: {len(all_file_messages)}")

    # 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    deleted_count = 0
    all_messages = webhook_messages | all_file_messages

    for msg_id in all_messages:
        try:
            debug_print(f"üßπ Deleting message {msg_id}...")
            await bot.delete_message(chat_id, msg_id)
            deleted_count += 1
            debug_print(f"‚úÖ Deleted message {msg_id}")
        except Exception as e:
            debug_print(f"‚ùå Failed to delete message {msg_id}: {e}", "WARN")

    # 4. –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥
    clear_webhook_messages(order_id)

    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in list(user_order_files.keys()):
        clear_order_file_messages(user_id, order_id)

    debug_print(
        f"üßπ WEBHOOK CLEANUP COMPLETE: Deleted {deleted_count}/{len(all_messages)} messages for order {order_id}")


@router.callback_query(F.data.startswith("webhook:") & F.data.contains(":close"))
async def on_webhook_close(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä–∏—Ç–∏' –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤ - —É–¥–∞–ª—è–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
        return

    order_id = int(parts[1])
    debug_print(f"üö® WEBHOOK CLOSE: order {order_id} from user {callback.from_user.id}")

    # –£–¥–∞–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ webhook –∑–∞–∫–∞–∑–∞
    await cleanup_webhook_order(
        callback.bot,
        callback.message.chat.id,
        order_id
    )

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ Telegram)
    await callback.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")

    debug_print(f"‚úÖ Webhook order {order_id} completely closed")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤)

@router.callback_query(F.data.startswith("order:") & F.data.contains(":resend:"))
async def on_webhook_resend_file(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF/VCF –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ webhook –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω–µ—Ç
    from .shared import is_webhook_message

    if not is_webhook_message(callback.message.message_id):
        # –≠—Ç–æ –Ω–µ webhook –∑–∞–∫–∞–∑, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
    from .orders import on_resend_file
    await on_resend_file(callback)


@router.callback_query(F.data.startswith("order:") & F.data.contains(":payment"))
async def on_webhook_payment_info(callback: CallbackQuery):
    """–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤"""

    from .shared import is_webhook_message

    if not is_webhook_message(callback.message.message_id):
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    from .orders import on_payment_info
    await on_payment_info(callback)


@router.callback_query(F.data.startswith("order:") & F.data.contains(":comment"))
async def on_webhook_comment(callback: CallbackQuery):
    """–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤"""

    from .shared import is_webhook_message

    if not is_webhook_message(callback.message.message_id):
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    from .management import on_comment_button
    await on_comment_button(callback)


@router.callback_query(F.data.startswith("order:") & F.data.contains(":reminder"))
async def on_webhook_reminder(callback: CallbackQuery):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤"""

    from .shared import is_webhook_message

    if not is_webhook_message(callback.message.message_id):
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    from .management import on_reminder_button
    await on_reminder_button(callback)


@router.callback_query(F.data.startswith("order:") & F.data.contains((":contacted", ":paid", ":cancel")))
async def on_webhook_status_change(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤"""

    from .shared import is_webhook_message

    if not is_webhook_message(callback.message.message_id):
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    if ":contacted" in callback.data:
        from .orders import on_contacted
        await on_contacted(callback)
    elif ":paid" in callback.data:
        from .orders import on_paid
        await on_paid(callback)
    elif ":cancel" in callback.data:
        from .orders import on_cancel
        await on_cancel(callback)