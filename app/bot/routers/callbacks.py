# app/bot/routers/callbacks.py
import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.db import get_session
from app.models import Order, OrderStatus, OrderStatusHistory
from app.bot.services.message_builder import get_status_emoji, get_status_text
from app.services.pdf_service import build_order_pdf
from app.services.vcf_service import build_contact_vcf
from app.services.phone_utils import normalize_ua_phone
import os

router = Router()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
class CommentStates(StatesGroup):
    waiting_for_comment = State()


def check_permission(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    allowed_ids = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "")
    allowed = [int(uid.strip()) for uid in allowed_ids.split(",") if uid.strip()]
    return not allowed or user_id in allowed  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π - –¥–æ—Å—Ç—É–ø –≤—Å–µ–º


def format_phone_compact(e164: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–∫—Ç–Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: +380960790247"""
    if not e164:
        return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º E.164 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return e164


def build_order_card_message(order: Order, detailed: bool = False) -> str:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    order_no = order.order_number or order.id
    status_emoji = get_status_emoji(order.status)
    status_text = get_status_text(order.status)

    # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    customer_name = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

    # –¢–µ–ª–µ—Ñ–æ–Ω –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤
    phone = format_phone_compact(order.customer_phone_e164)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üì¶ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_no}</b> ‚Ä¢ {status_emoji} {status_text}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ {customer_name}
üì± {phone}"""

    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö (–∏–∑ raw_json)
    if detailed and order.raw_json:
        data = order.raw_json

        # –¢–æ–≤–∞—Ä—ã
        items = data.get("line_items", [])
        if items:
            items_text = []
            total_sum = 0
            for item in items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                title = item.get("title", "")
                qty = item.get("quantity", 0)
                price = float(item.get("price", 0))
                total_sum += price * qty
                items_text.append(f"‚Ä¢ {title} x{qty}")

            if items_text:
                message += f"\nüõç <b>–¢–æ–≤–∞—Ä–∏:</b> {', '.join(items_text)}"
                if len(items) > 5:
                    message += f" <i>+—â–µ {len(items) - 5}</i>"

        # –î–æ—Å—Ç–∞–≤–∫–∞
        shipping = data.get("shipping_address", {})
        if shipping:
            city = shipping.get("city", "")
            address = shipping.get("address1", "")
            if city or address:
                delivery_parts = [p for p in [city, address] if p]
                message += f"\nüìç <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {', '.join(delivery_parts)}"

        # –°—É–º–º–∞
        total = data.get("total_price", "")
        currency = data.get("currency", "UAH")
        if total:
            message += f"\nüí∞ <b>–°—É–º–∞:</b> {total} {currency}"

    message += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    if order.comment:
        message += f"\nüí¨ <i>–ö–æ–º–µ–Ω—Ç–∞—Ä: {order.comment}</i>"

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if order.reminder_at:
        reminder_time = order.reminder_at.strftime("%d.%m %H:%M")
        message += f"\n‚è∞ <i>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder_time}</i>"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    if order.processed_by_username:
        message += f"\nüë®‚Äçüíº <i>–ú–µ–Ω–µ–¥–∂–µ—Ä: @{order.processed_by_username}</i>"

    return message


def get_order_card_keyboard(order: Order) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞"""
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if order.status == OrderStatus.NEW:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–≤'—è–∑–∞–ª–∏—Å—å", callback_data=f"order:{order.id}:contacted"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"order:{order.id}:cancel")
        ])
    elif order.status == OrderStatus.WAITING_PAYMENT:
        buttons.append([
            InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏–ª–∏", callback_data=f"order:{order.id}:paid"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"order:{order.id}:cancel")
        ])

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if order.status in [OrderStatus.NEW, OrderStatus.WAITING_PAYMENT]:
        buttons.append([
            InlineKeyboardButton(text="üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä", callback_data=f"order:{order.id}:comment"),
            InlineKeyboardButton(text="‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏", callback_data=f"order:{order.id}:reminder")
        ])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ "–û–Ω–æ–≤–∏—Ç–∏")
    buttons.append([
        InlineKeyboardButton(text="üìÑ PDF", callback_data=f"order:{order.id}:resend:pdf"),
        InlineKeyboardButton(text="üì± VCF", callback_data=f"order:{order.id}:resend:vcf")
    ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data=f"orders:list:pending:offset=0")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data.regexp(r"^order:\d+:view$"))
async def on_order_view(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
        except Exception:
            await callback.message.answer(
                message_text,
                reply_markup=keyboard
            )

    await callback.answer()


@router.callback_query(F.data == "menu:main")
async def on_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è"""
    buttons = [
        [InlineKeyboardButton(text="üìã –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ", callback_data="orders:list:pending:offset=0")],
        [InlineKeyboardButton(text="üì¶ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="orders:list:all:offset=0")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats:show")]
    ]

    await callback.message.edit_text(
        "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("orders:list:"))
async def on_orders_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    parts = callback.data.split(":")
    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
        return

    kind = parts[2]
    try:
        offset = int(parts[3].replace("offset=", ""))
    except:
        offset = 0

    PAGE_SIZE = 5

    with get_session() as session:
        query = session.query(Order)

        if kind == "pending":
            query = query.filter(Order.status.in_([OrderStatus.NEW, OrderStatus.WAITING_PAYMENT]))

        total = query.count()
        orders = query.order_by(Order.created_at.desc()).offset(offset).limit(PAGE_SIZE).all()

        if not orders:
            buttons = [[
                InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu:main")
            ]]
            await callback.message.edit_text(
                "üì≠ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            await callback.answer()
            return

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if kind == "pending":
            text = "üìã <b>–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        else:
            text = "üì¶ <b>–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        buttons = []
        for order in orders:
            order_no = order.order_number or order.id
            customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
            emoji = get_status_emoji(order.status)

            # –¢–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–∫–µ
            text += f"{emoji} ‚Ññ{order_no} ‚Ä¢ {customer}\n"

            # –ö–Ω–æ–ø–∫–∞
            button_text = f"‚Ññ{order_no} ‚Ä¢ {customer[:20]}"
            buttons.append([
                InlineKeyboardButton(text=button_text, callback_data=f"order:{order.id}:view")
            ])

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        nav_buttons = []
        if offset > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders:list:{kind}:offset={offset - PAGE_SIZE}")
            )

        current_page = (offset // PAGE_SIZE) + 1
        total_pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
        nav_buttons.append(
            InlineKeyboardButton(text=f"üìÑ {current_page}/{total_pages}", callback_data="noop")
        )

        if offset + PAGE_SIZE < total:
            nav_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"orders:list:{kind}:offset={offset + PAGE_SIZE}")
            )

        if nav_buttons:
            buttons.append(nav_buttons)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append([
            InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu:main")
        ])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

    await callback.answer()


@router.callback_query(F.data.contains(":contacted"))
async def on_contacted(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–ó–≤'—è–∑–∞–ª–∏—Å—å'"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if order.status != OrderStatus.NEW:
            await callback.answer("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –≤–∂–µ –∑–º—ñ–Ω–µ–Ω–æ", show_alert=True)
            return

        old_status = order.status
        order.status = OrderStatus.WAITING_PAYMENT
        order.processed_by_user_id = callback.from_user.id
        order.processed_by_username = callback.from_user.username or callback.from_user.first_name

        history = OrderStatusHistory(
            order_id=order_id,
            old_status=old_status.value,
            new_status=OrderStatus.WAITING_PAYMENT.value,
            changed_by_user_id=callback.from_user.id,
            changed_by_username=callback.from_user.username or callback.from_user.first_name
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )

        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        notification = f"üìù –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id} ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚è≥ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É"
        await callback.bot.send_message(callback.message.chat.id, notification)


@router.callback_query(F.data.contains(":cancel"))
async def on_cancel(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è'"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if order.status == OrderStatus.CANCELLED:
            await callback.answer("‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)
            return

        old_status = order.status
        order.status = OrderStatus.CANCELLED

        history = OrderStatusHistory(
            order_id=order_id,
            old_status=old_status.value,
            new_status=OrderStatus.CANCELLED.value,
            changed_by_user_id=callback.from_user.id,
            changed_by_username=callback.from_user.username or callback.from_user.first_name
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )

        await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
        await callback.bot.send_message(callback.message.chat.id, notification)


@router.callback_query(F.data.contains(":paid"))
async def on_paid(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–û–ø–ª–∞—Ç–∏–ª–∏'"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if order.status != OrderStatus.WAITING_PAYMENT:
            await callback.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", show_alert=True)
            return

        old_status = order.status
        order.status = OrderStatus.PAID

        history = OrderStatusHistory(
            order_id=order_id,
            old_status=old_status.value,
            new_status=OrderStatus.PAID.value,
            changed_by_user_id=callback.from_user.id,
            changed_by_username=callback.from_user.username or callback.from_user.first_name
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )

        await callback.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = f"üí∞ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id} –æ–ø–ª–∞—á–µ–Ω–æ!"
        await callback.bot.send_message(callback.message.chat.id, notification)


@router.callback_query(F.data.contains(":resend:"))
async def on_resend_file(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF –∏–ª–∏ VCF"""
    parts = callback.data.split(":")
    order_id = int(parts[1])
    file_type = parts[3]

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order or not order.raw_json:
            await callback.answer("‚ùå –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        try:
            from aiogram.types import BufferedInputFile

            if file_type == "pdf":
                pdf_bytes, pdf_filename = build_order_pdf(order.raw_json)
                pdf_file = BufferedInputFile(pdf_bytes, pdf_filename)

                caption = f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id}"
                if order.customer_first_name or order.customer_last_name:
                    caption += f" ‚Ä¢ {order.customer_first_name or ''} {order.customer_last_name or ''}".strip()

                await callback.bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=pdf_file,
                    caption=caption
                )
                await callback.answer("‚úÖ PDF –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

            elif file_type == "vcf":
                vcf_bytes, vcf_filename = build_contact_vcf(
                    first_name=order.customer_first_name or "",
                    last_name=order.customer_last_name or "",
                    order_id=str(order.order_number or order.id),
                    phone_e164=order.customer_phone_e164
                )
                vcf_file = BufferedInputFile(vcf_bytes, vcf_filename)

                caption = "üì± –ö–æ–Ω—Ç–∞–∫—Ç –∫–ª—ñ—î–Ω—Ç–∞"
                if order.customer_phone_e164:
                    caption += f" ‚Ä¢ {format_phone_compact(order.customer_phone_e164)}"

                await callback.bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=vcf_file,
                    caption=caption
                )
                await callback.answer("‚úÖ VCF –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "stats:show")
async def on_stats_show(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    with get_session() as session:
        total = session.query(Order).count()
        new = session.query(Order).filter(Order.status == OrderStatus.NEW).count()
        waiting = session.query(Order).filter(Order.status == OrderStatus.WAITING_PAYMENT).count()
        paid = session.query(Order).filter(Order.status == OrderStatus.PAID).count()
        cancelled = session.query(Order).filter(Order.status == OrderStatus.CANCELLED).count()

        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        today_count = session.query(Order).filter(Order.created_at >= today).count()

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>

üì¶ –í—Å—å–æ–≥–æ: {total}
üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {today_count}

<b>–ó–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏:</b>
üÜï –ù–æ–≤–∏—Ö: {new}
‚è≥ –û—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É: {waiting}
‚úÖ –û–ø–ª–∞—á–µ–Ω–∏—Ö: {paid}
‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–∏—Ö: {cancelled}

<i>–û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}</i>"""

        buttons = [[
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="stats:show"),
            InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="menu:main")
        ]]

        await callback.message.edit_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

    await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(F.data == "noop")
async def on_noop(callback: CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()

# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è comment –∏ reminder (–∏–∑ handlers/callbacks.py)