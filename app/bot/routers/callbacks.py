# app/bot/routers/callbacks.py - –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê
import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from app.db import get_session
from app.models import Order, OrderStatus, OrderStatusHistory
from app.bot.services.message_builder import get_status_emoji, get_status_text
from app.services.pdf_service import build_order_pdf
from app.services.vcf_service import build_contact_vcf
from app.services.phone_utils import normalize_ua_phone
import os

router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ Redis –∏–ª–∏ –ë–î
user_last_messages = {}


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
class CommentStates(StatesGroup):
    waiting_for_comment = State()


def check_permission(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    allowed_ids = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "")
    allowed = [int(uid.strip()) for uid in allowed_ids.split(",") if uid.strip()]
    return not allowed or user_id in allowed  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π - –¥–æ—Å—Ç—É–ø –≤—Å–µ–º


def store_user_message(user_id: int, message_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_last_messages[user_id] = message_id


async def edit_or_send_message(bot, chat_id: int, user_id: int, text: str,
                               reply_markup: InlineKeyboardMarkup = None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ"""
    last_message_id = user_last_messages.get(user_id)

    if last_message_id:
        try:
            await bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=last_message_id,
                reply_markup=reply_markup
            )
            return last_message_id
        except (TelegramBadRequest, Exception):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup
    )
    store_user_message(user_id, message.message_id)
    return message.message_id


def format_phone_compact(e164: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–∫—Ç–Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: +380960790247"""
    if not e164:
        return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    return e164


def build_order_card_message(order: Order, detailed: bool = False) -> str:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    order_no = order.order_number or order.id
    status_emoji = get_status_emoji(order.status)
    status_text = get_status_text(order.status)

    # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    customer_name = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

    # –¢–µ–ª–µ—Ñ–æ–Ω –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤
    phone = format_phone_compact(order.customer_phone_e164)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üì¶ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_no}</b> ‚Ä¢ {status_emoji} {status_text}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ {customer_name}
üì± {phone}"""

    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö (–∏–∑ raw_json)
    if detailed and order.raw_json:
        data = order.raw_json

        # –¢–æ–≤–∞—Ä—ã
        items = data.get("line_items", [])
        if items:
            items_text = []
            for item in items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                title = item.get("title", "")
                qty = item.get("quantity", 0)
                items_text.append(f"‚Ä¢ {title} x{qty}")

            if items_text:
                message += f"\nüõç <b>–¢–æ–≤–∞—Ä–∏:</b> {', '.join(items_text)}"
                if len(items) > 5:
                    message += f" <i>+—â–µ {len(items) - 5}</i>"

        # –î–æ—Å—Ç–∞–≤–∫–∞
        shipping = data.get("shipping_address", {})
        if shipping:
            city = shipping.get("city", "")
            address = shipping.get("address1", "")
            if city or address:
                delivery_parts = [p for p in [city, address] if p]
                message += f"\nüìç <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {', '.join(delivery_parts)}"

        # –°—É–º–º–∞
        total = data.get("total_price", "")
        currency = data.get("currency", "UAH")
        if total:
            message += f"\nüí∞ <b>–°—É–º–∞:</b> {total} {currency}"

    message += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    if order.comment:
        message += f"\nüí¨ <i>–ö–æ–º–µ–Ω—Ç–∞—Ä: {order.comment}</i>"

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if order.reminder_at:
        reminder_time = order.reminder_at.strftime("%d.%m %H:%M")
        message += f"\n‚è∞ <i>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder_time}</i>"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    if order.processed_by_username:
        message += f"\nüë®‚Äçüíº <i>–ú–µ–Ω–µ–¥–∂–µ—Ä: @{order.processed_by_username}</i>"

    return message


def get_order_card_keyboard(order: Order) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ - –ï–î–ò–ù–´–ô –§–û–†–ú–ê–¢"""
    buttons = []

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    if order.status == OrderStatus.NEW:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–≤'—è–∑–∞–ª–∏—Å—å", callback_data=f"order:{order.id}:contacted"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"order:{order.id}:cancel")
        ])
    elif order.status == OrderStatus.WAITING_PAYMENT:
        buttons.append([
            InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏–ª–∏", callback_data=f"order:{order.id}:paid"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"order:{order.id}:cancel")
        ])

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥: PDF –∏ VCF
    buttons.append([
        InlineKeyboardButton(text="üìÑ PDF", callback_data=f"order:{order.id}:resend:pdf"),
        InlineKeyboardButton(text="üì± VCF", callback_data=f"order:{order.id}:resend:vcf")
    ])

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –†–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    buttons.append([
        InlineKeyboardButton(text="üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏", callback_data=f"order:{order.id}:payment")
    ])

    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
    if order.status in [OrderStatus.NEW, OrderStatus.WAITING_PAYMENT]:
        buttons.append([
            InlineKeyboardButton(text="üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä", callback_data=f"order:{order.id}:comment"),
            InlineKeyboardButton(text="‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏", callback_data=f"order:{order.id}:reminder")
        ])

    # –ü—è—Ç—ã–π —Ä—è–¥: –ù–∞–≤–∏–≥–∞—Ü–∏—è
    buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data=f"orders:list:pending:offset=0")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_reminder_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    buttons = [
        [
            InlineKeyboardButton(text="15 —Ö–≤", callback_data=f"reminder:{order_id}:15"),
            InlineKeyboardButton(text="30 —Ö–≤", callback_data=f"reminder:{order_id}:30"),
            InlineKeyboardButton(text="1 –≥–æ–¥", callback_data=f"reminder:{order_id}:60")
        ],
        [
            InlineKeyboardButton(text="2 –≥–æ–¥", callback_data=f"reminder:{order_id}:120"),
            InlineKeyboardButton(text="4 –≥–æ–¥", callback_data=f"reminder:{order_id}:240"),
            InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"reminder:{order_id}:1440")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"order:{order_id}:back")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data == "menu:main")
async def on_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    buttons = [
        [InlineKeyboardButton(text="üìã –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ", callback_data="orders:list:pending:offset=0")],
        [InlineKeyboardButton(text="üì¶ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="orders:list:all:offset=0")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats:show")]
    ]

    await edit_or_send_message(
        callback.bot,
        callback.message.chat.id,
        callback.from_user.id,
        "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("orders:list:"))
async def on_orders_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    parts = callback.data.split(":")
    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
        return

    kind = parts[2]
    try:
        offset = int(parts[3].replace("offset=", ""))
    except:
        offset = 0

    PAGE_SIZE = 5

    with get_session() as session:
        query = session.query(Order)

        if kind == "pending":
            query = query.filter(Order.status.in_([OrderStatus.NEW, OrderStatus.WAITING_PAYMENT]))

        # –°–û–†–¢–ò–†–û–í–ö–ê: —Å–Ω–∞—á–∞–ª–∞ –ø–æ order_number (–µ—Å–ª–∏ –µ—Å—Ç—å), –ø–æ—Ç–æ–º –ø–æ id - –û–¢ –ë–û–õ–¨–®–ò–• –ö –ú–ï–ù–¨–®–ò–ú
        query = query.order_by(
            Order.order_number.desc().nullslast(),
            Order.id.desc()
        )

        total = query.count()
        orders = query.offset(offset).limit(PAGE_SIZE).all()

        if not orders:
            buttons = [[
                InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu:main")
            ]]
            await edit_or_send_message(
                callback.bot,
                callback.message.chat.id,
                callback.from_user.id,
                "üì≠ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            await callback.answer()
            return

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if kind == "pending":
            text = "üìã <b>–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        else:
            text = "üì¶ <b>–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        buttons = []
        for order in orders:
            order_no = order.order_number or order.id
            customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
            emoji = get_status_emoji(order.status)

            # –¢–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–∫–µ
            text += f"{emoji} #{order_no} ‚Ä¢ {customer}\n"

            # –ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            button_text = f"{emoji} #{order_no} ‚Ä¢ {customer[:20]}"
            buttons.append([
                InlineKeyboardButton(text=button_text, callback_data=f"order:{order.id}:view")
            ])

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        nav_buttons = []
        if offset > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders:list:{kind}:offset={offset - PAGE_SIZE}")
            )

        current_page = (offset // PAGE_SIZE) + 1
        total_pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
        nav_buttons.append(
            InlineKeyboardButton(text=f"üìÑ {current_page}/{total_pages}", callback_data="noop")
        )

        if offset + PAGE_SIZE < total:
            nav_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"orders:list:{kind}:offset={offset + PAGE_SIZE}")
            )

        if nav_buttons:
            buttons.append(nav_buttons)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append([
            InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu:main")
        ])

        await edit_or_send_message(
            callback.bot,
            callback.message.chat.id,
            callback.from_user.id,
            text,
            InlineKeyboardMarkup(inline_keyboard=buttons)
        )

    await callback.answer()


@router.callback_query(F.data.regexp(r"^order:\d+:view$"))
async def on_order_view(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞ - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        await edit_or_send_message(
            callback.bot,
            callback.message.chat.id,
            callback.from_user.id,
            message_text,
            keyboard
        )

    await callback.answer()


@router.callback_query(F.data.contains(":payment"))
async def on_payment_info(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–†–µ–∫–≤—ñ–∑–∏—Ç–∏' - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        order_total = "800"
        currency = "–≥—Ä–Ω"

        if order.raw_json:
            total_price = order.raw_json.get("total_price")
            order_currency = order.raw_json.get("currency", "UAH")
            if total_price:
                try:
                    order_total = str(int(float(total_price)))
                    currency = "–≥—Ä–Ω" if order_currency == "UAH" else order_currency
                except:
                    pass

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        payment_message = f"""üí≥ <b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏</b>

–ü–µ—Ä–µ–¥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Ä–æ–±–æ—Ç—É –ø—ñ—Å–ª—è –ø—Ä–µ–¥–ø–ª–∞—Ç–∏, —Ç–∞–∫ —è–∫ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ 

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î 7 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤, –æ–¥—Ä–∞–∑—É –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –í–∞–º üöÄ

üõç <b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î - {order_total} {currency}</b>

–û–ø–ª–∞—Ç—É –º–æ–∂–Ω–∞ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –Ω–∞:
<b>–§–û–ü –ù–∏—Ç—è–∂—É–∫ –ö–∞—Ç–µ—Ä–∏–Ω–∞ –°–µ—Ä–≥—ñ—ó–≤–Ω–∞</b>
<code>UA613220010000026004340089782</code>
<b>–ï–î–†–ü–û–£:</b> 3577508940
<b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b> –û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä 

–ù–∞–¥—Å–∏–ª–∞—é –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–∫—Ä–µ–º–æ, —â–æ–± –≤–∞–º –±—É–ª–æ –∑—Ä—É—á–Ω–æ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ ‚ò∫Ô∏èüëá"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        main_msg = await callback.bot.send_message(
            callback.message.chat.id,
            payment_message
        )

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        track_order_message(callback.from_user.id, order_id, main_msg.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copy_messages = [
            "UA613220010000026004340089782",
            "–§–û–ü –ù–∏—Ç—è–∂—É–∫ –ö–∞—Ç–µ—Ä–∏–Ω–∞ –°–µ—Ä–≥—ñ—ó–≤–Ω–∞",
            "3577508940",
            "–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä"
        ]

        for msg_text in copy_messages:
            copy_msg = await callback.bot.send_message(
                callback.message.chat.id,
                f"<code>{msg_text}</code>"
            )
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
            track_order_message(callback.from_user.id, order_id, copy_msg.message_id)

        await callback.answer("üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ")

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        history = OrderStatusHistory(
            order_id=order_id,
            old_status=order.status.value,
            new_status=order.status.value,
            changed_by_user_id=callback.from_user.id,
            changed_by_username=callback.from_user.username or callback.from_user.first_name,
            comment="–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏"
        )
        session.add(history)
        session.commit()


@router.callback_query(F.data.contains(":comment"))
async def on_comment_button(callback: CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ '–ö–æ–º–µ–Ω—Ç–∞—Ä' - –∑–∞–ø—É—Å–∫ FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    # –ó–∞–ø—É—Å–∫–∞–µ–º FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(CommentStates.waiting_for_comment)
    await state.update_data(order_id=order_id, original_message_id=callback.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ë–ï–ó reply
    prompt_msg = await callback.bot.send_message(
        callback.message.chat.id,
        f"üí¨ –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}:"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(prompt_message_id=prompt_msg.message_id)

    await callback.answer("üí¨ –û—á—ñ–∫—É—é –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä")


@router.message(CommentStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if not check_permission(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        await state.clear()
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    original_message_id = data.get("original_message_id")
    prompt_message_id = data.get("prompt_message_id")

    comment_text = message.text

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await message.reply("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        order.comment = comment_text

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history = OrderStatusHistory(
            order_id=order_id,
            old_status=order.status.value,
            new_status=order.status.value,
            changed_by_user_id=message.from_user.id,
            changed_by_username=message.from_user.username or message.from_user.first_name,
            comment=comment_text
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
        new_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        try:
            await message.bot.edit_message_text(
                new_text,
                chat_id=message.chat.id,
                message_id=original_message_id,
                reply_markup=keyboard
            )
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        notification = f'‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä "{comment_text}" –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id}'
        await message.bot.send_message(message.chat.id, notification)

        # –£–¥–∞–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if prompt_message_id:
                await message.bot.delete_message(message.chat.id, prompt_message_id)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            await message.bot.delete_message(message.chat.id, message.message_id)
        except:
            pass

    await state.clear()


@router.callback_query(F.data.contains(":reminder"))
async def on_reminder_button(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–≥–∞–¥–∞—Ç–∏' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = get_reminder_keyboard(order_id)

    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
    except:
        await callback.answer("‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", show_alert=True)


@router.callback_query(F.data.startswith("reminder:"))
async def handle_reminder_time(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    parts = callback.data.split(":")
    order_id = int(parts[1])
    minutes = int(parts[2])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        order.reminder_at = datetime.utcnow() + timedelta(minutes=minutes)
        session.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        try:
            await callback.message.edit_text(message_text, reply_markup=keyboard)
        except:
            pass

        if minutes < 60:
            time_text = f"{minutes} —Ö–≤–∏–ª–∏–Ω"
        elif minutes < 1440:
            time_text = f"{minutes // 60} –≥–æ–¥–∏–Ω"
        else:
            time_text = "–∑–∞–≤—Ç—Ä–∞"

        await callback.answer(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {time_text}")


@router.callback_query(F.data.contains(":back"))
async def on_back_to_order(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        try:
            await callback.message.edit_text(message_text, reply_markup=keyboard)
        except:
            pass

    await callback.answer()


@router.callback_query(F.data.contains(":contacted"))
async def on_contacted(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–ó–≤'—è–∑–∞–ª–∏—Å—å'"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if order.status != OrderStatus.NEW:
            await callback.answer("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –≤–∂–µ –∑–º—ñ–Ω–µ–Ω–æ", show_alert=True)
            return

        old_status = order.status
        order.status = OrderStatus.WAITING_PAYMENT
        order.processed_by_user_id = callback.from_user.id
        order.processed_by_username = callback.from_user.username or callback.from_user.first_name

        history = OrderStatusHistory(
            order_id=order_id,
            old_status=old_status.value,
            new_status=OrderStatus.WAITING_PAYMENT.value,
            changed_by_user_id=callback.from_user.id,
            changed_by_username=callback.from_user.username or callback.from_user.first_name
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        try:
            await callback.message.edit_text(message_text, reply_markup=keyboard)
        except:
            pass

        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        notification = f"üìù –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id} ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚è≥ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É"
        await callback.bot.send_message(callback.message.chat.id, notification)


@router.callback_query(F.data.contains(":cancel"))
async def on_cancel(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è'"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if order.status == OrderStatus.CANCELLED:
            await callback.answer("‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)
            return

        old_status = order.status
        order.status = OrderStatus.CANCELLED

        history = OrderStatusHistory(
            order_id=order_id,
            old_status=old_status.value,
            new_status=OrderStatus.CANCELLED.value,
            changed_by_user_id=callback.from_user.id,
            changed_by_username=callback.from_user.username or callback.from_user.first_name
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        try:
            await callback.message.edit_text(message_text, reply_markup=keyboard)
        except:
            pass

        await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
        await callback.bot.send_message(callback.message.chat.id, notification)


@router.callback_query(F.data.contains(":paid"))
async def on_paid(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–û–ø–ª–∞—Ç–∏–ª–∏'"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if order.status != OrderStatus.WAITING_PAYMENT:
            await callback.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", show_alert=True)
            return

        old_status = order.status
        order.status = OrderStatus.PAID

        history = OrderStatusHistory(
            order_id=order_id,
            old_status=old_status.value,
            new_status=OrderStatus.PAID.value,
            changed_by_user_id=callback.from_user.id,
            changed_by_username=callback.from_user.username or callback.from_user.first_name
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = build_order_card_message(order, detailed=True)
        keyboard = get_order_card_keyboard(order)

        try:
            await callback.message.edit_text(message_text, reply_markup=keyboard)
        except:
            pass

        await callback.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = f"üí∞ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_number or order.id} –æ–ø–ª–∞—á–µ–Ω–æ!"
        await callback.bot.send_message(callback.message.chat.id, notification)


@router.callback_query(F.data.contains(":resend:"))
async def on_resend_file(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF –∏–ª–∏ VCF"""
    parts = callback.data.split(":")
    order_id = int(parts[1])
    file_type = parts[3]

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order or not order.raw_json:
            await callback.answer("‚ùå –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        try:
            from aiogram.types import BufferedInputFile

            if file_type == "pdf":
                pdf_bytes, pdf_filename = build_order_pdf(order.raw_json)
                pdf_file = BufferedInputFile(pdf_bytes, pdf_filename)

                # PDF —Å caption –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                customer_message = f"""üí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É:</b>

<i>–í—ñ—Ç–∞—é, {order.customer_first_name or '–∫–ª—ñ—î–Ω—Ç–µ'} ‚ò∫Ô∏è
–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}
–í—Å–µ –≤—ñ—Ä–Ω–æ?</i>"""

                pdf_msg = await callback.bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=pdf_file,
                    caption=customer_message
                )

                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º PDF —Å–æ–æ–±—â–µ–Ω–∏–µ
                track_order_message(callback.from_user.id, order_id, pdf_msg.message_id)
                await callback.answer("‚úÖ PDF –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

            elif file_type == "vcf":
                vcf_bytes, vcf_filename = build_contact_vcf(
                    first_name=order.customer_first_name or "",
                    last_name=order.customer_last_name or "",
                    order_id=str(order.order_number or order.id),
                    phone_e164=order.customer_phone_e164
                )
                vcf_file = BufferedInputFile(vcf_bytes, vcf_filename)

                caption = f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –∫–ª—ñ—î–Ω—Ç–∞ ‚Ä¢ #{order.order_number or order.id}"
                if order.customer_phone_e164:
                    caption += f" ‚Ä¢ {format_phone_compact(order.customer_phone_e164)}"

                vcf_msg = await callback.bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=vcf_file,
                    caption=caption
                )

                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º VCF —Å–æ–æ–±—â–µ–Ω–∏–µ
                track_order_message(callback.from_user.id, order_id, vcf_msg.message_id)
                await callback.answer("‚úÖ VCF –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

        except Exception as e:
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "stats:show")
async def on_stats_show(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    with get_session() as session:
        total = session.query(Order).count()
        new = session.query(Order).filter(Order.status == OrderStatus.NEW).count()
        waiting = session.query(Order).filter(Order.status == OrderStatus.WAITING_PAYMENT).count()
        paid = session.query(Order).filter(Order.status == OrderStatus.PAID).count()
        cancelled = session.query(Order).filter(Order.status == OrderStatus.CANCELLED).count()

        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        today_count = session.query(Order).filter(Order.created_at >= today).count()

        current_time = datetime.now().strftime('%H:%M')

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>

üì¶ –í—Å—å–æ–≥–æ: {total}
üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {today_count}

<b>–ó–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏:</b>
üÜï –ù–æ–≤–∏—Ö: {new}
‚è≥ –û—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É: {waiting}
‚úÖ –û–ø–ª–∞—á–µ–Ω–∏—Ö: {paid}
‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–∏—Ö: {cancelled}

<i>–û–Ω–æ–≤–ª–µ–Ω–æ: {current_time}</i>"""

        buttons = [[
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="stats:refresh"),
            InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="menu:main")
        ]]

        await edit_or_send_message(
            callback.bot,
            callback.message.chat.id,
            callback.from_user.id,
            stats_text,
            InlineKeyboardMarkup(inline_keyboard=buttons)
        )

    await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(F.data == "stats:refresh")
async def on_stats_refresh(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    callback.data = "stats:show"
    await on_stats_show(callback)


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ —Å–ø–∏—Å–∫—É"
@router.callback_query(F.data.startswith("orders:list:pending:offset=0"))
async def on_back_to_pending_list(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–î–æ —Å–ø–∏—Å–∫—É' - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å –æ—á–∏—Å—Ç–∫–æ–π"""

    # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ - —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message and callback.message.text and "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #" in callback.message.text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            import re
            match = re.search(r'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #(\d+)', callback.message.text)
            if match:
                order_number = match.group(1)
                # –ù–∞–π–¥–µ–º order_id –ø–æ –Ω–æ–º–µ—Ä—É
                with get_session() as session:
                    order = session.query(Order).filter(
                        (Order.order_number == order_number) | (Order.id == int(order_number))
                    ).first()

                    if order:
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        await delete_order_related_messages(
                            callback.bot,
                            callback.message.chat.id,
                            callback.from_user.id,
                            order.id,
                            str(order.order_number or order.id)
                        )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
            pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    callback.data = "orders:list:pending:offset=0"
    await on_orders_list(callback)


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@router.message(F.text == "/menu")
async def on_menu_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    buttons = [
        [InlineKeyboardButton(text="üìã –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ", callback_data="orders:list:pending:offset=0")],
        [InlineKeyboardButton(text="üì¶ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="orders:list:all:offset=0")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats:show")]
    ]

    new_message = await message.answer(
        "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    store_user_message(message.from_user.id, new_message.message_id)


@router.callback_query(F.data == "noop")
async def on_noop(callback: CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()