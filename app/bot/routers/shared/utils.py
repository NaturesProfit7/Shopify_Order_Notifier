# app/bot/routers/shared/utils.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ
"""–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –ë–ï–ó –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –ò–ú–ü–û–†–¢–û–í"""

import os
from typing import TYPE_CHECKING
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

if TYPE_CHECKING:
    from app.models import Order

from .state import (
    get_navigation_message_id,
    set_navigation_message_id,
    remove_navigation_message_id,
    add_order_file_message,
    get_order_file_messages,
    clear_order_file_messages,
    add_navigation_message,
    get_all_navigation_messages,
    clear_all_navigation_messages,
    remove_navigation_message,
    clear_all_user_files,
    # –ù–û–í–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è webhook
    add_webhook_message,
    get_webhook_messages,
    clear_webhook_messages,
    is_webhook_message,
    get_order_by_webhook_message
)


def debug_print(message: str, level: str = "INFO") -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"ü§ñ BOT {level}: {message}")


def check_permission(user_id: int) -> bool:
    """
    –£–ñ–ï–°–¢–û–ß–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.
    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ TELEGRAM_ALLOWED_USER_IDS –∑–∞–¥–∞–Ω - –¥–æ—Å—Ç—É–ø –¢–û–õ–¨–ö–û –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö ID.
    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π - –¥–æ—Å—Ç—É–ø–∞ –ù–ï–¢ –Ω–∏ —É –∫–æ–≥–æ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
    """
    allowed_ids_str = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "").strip()

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è - –¥–æ—Å—Ç—É–ø–∞ –ù–ï–¢ –Ω–∏ —É –∫–æ–≥–æ
    if not allowed_ids_str:
        debug_print(f"üîá SILENT BLOCK: No allowed users configured", "WARN")
        return False

    try:
        allowed = [int(uid.strip()) for uid in allowed_ids_str.split(",") if uid.strip()]

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –¥–æ—Å—Ç—É–ø–∞ –ù–ï–¢
        if not allowed:
            debug_print(f"üîá SILENT BLOCK: Failed to parse allowed users list", "WARN")
            return False

        is_allowed = user_id in allowed

        if is_allowed:
            debug_print(f"‚úÖ ACCESS GRANTED: User {user_id} is authorized")
        else:
            debug_print(f"üîá SILENT BLOCK: User {user_id} ignored (not in allowed list)", "WARN")

        return is_allowed

    except Exception as e:
        debug_print(f"üîá SILENT BLOCK: Error checking permissions for user {user_id}: {e}", "ERROR")
def format_phone_compact(e164: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–∫—Ç–Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not e164:
        return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    return e164


def is_coming_from_order_card(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞"""
    if not message or not message.text:
        return False

    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    text = message.text
    return (
            "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #" in text and
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" in text and
            ("üì±" in text or "üë§" in text)
    )


def is_webhook_order_message(message) -> bool:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ webhook –∑–∞–∫–∞–∑–æ–º
    –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä–∏—Ç–∏' —Å callback_data 'webhook:*:close'
    """
    if not message or not message.reply_markup:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    for row in message.reply_markup.inline_keyboard:
        for button in row:
            if (button.callback_data and
                    "webhook:" in button.callback_data and
                    ":close" in button.callback_data):
                debug_print(f"Found webhook close button: {button.callback_data}")
                return True

    debug_print("No webhook close button found - regular order card")
    return False


def get_webhook_order_keyboard(order: 'Order') -> InlineKeyboardMarkup:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤ - –í–°–ï–ì–î–ê —Å –∫–Ω–æ–ø–∫–æ–π '–ó–∞–∫—Ä–∏—Ç–∏'
    –ò–ú–ü–û–†–¢–ò–†–£–ï–ú OrderStatus –õ–û–ö–ê–õ–¨–ù–û —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    """
    from app.models import OrderStatus

    buttons = []

    # –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    if order.status == OrderStatus.NEW:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–≤'—è–∑–∞–ª–∏—Å—å", callback_data=f"order:{order.id}:contacted"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"order:{order.id}:cancel")
        ])
    elif order.status == OrderStatus.WAITING_PAYMENT:
        buttons.append([
            InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏–ª–∏", callback_data=f"order:{order.id}:paid"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"order:{order.id}:cancel")
        ])

    # –§–∞–π–ª—ã
    buttons.append([
        InlineKeyboardButton(text="üìÑ PDF", callback_data=f"order:{order.id}:resend:pdf"),
        InlineKeyboardButton(text="üì± VCF", callback_data=f"order:{order.id}:resend:vcf")
    ])

    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    buttons.append([
        InlineKeyboardButton(text="üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏", callback_data=f"order:{order.id}:payment")
    ])

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
    if order.status in [OrderStatus.NEW, OrderStatus.WAITING_PAYMENT]:
        buttons.append([
            InlineKeyboardButton(text="üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä", callback_data=f"order:{order.id}:comment"),
            InlineKeyboardButton(text="‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏", callback_data=f"order:{order.id}:reminder")
        ])

    # –í–°–ï–ì–î–ê –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä–∏—Ç–∏" –¥–ª—è webhook –∑–∞–∫–∞–∑–æ–≤
    buttons.append([
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data=f"webhook:{order.id}:close")
    ])

    debug_print(f"Created webhook keyboard for order {order.id} with {len(buttons)} rows")
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def track_navigation_message(user_id: int, message_id: int) -> None:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    debug_print(f"Tracking navigation message for user {user_id}: {message_id}")
    set_navigation_message_id(user_id, message_id)
    add_navigation_message(user_id, message_id)
    debug_print(f"Navigation message set successfully")


def track_order_file_message(user_id: int, order_id: int, message_id: int) -> None:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    debug_print(f"üìå TRACKING: user {user_id}, order {order_id}, message {message_id}")
    add_order_file_message(user_id, order_id, message_id)

    tracked_messages = get_order_file_messages(user_id, order_id)
    debug_print(f"üìå Now tracking {len(tracked_messages)} messages for order {order_id}: {list(tracked_messages)}")


async def cleanup_all_navigation(bot, chat_id: int, user_id: int) -> None:
    """–£–¥–∞–ª—è–µ–º –í–°–ï –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    debug_print(f"üßπ NAVIGATION CLEANUP START: user {user_id}")
    message_ids = get_all_navigation_messages(user_id)
    debug_print(f"üßπ Found {len(message_ids)} navigation messages to delete: {list(message_ids)}")

    deleted_count = 0
    for msg_id in message_ids:
        try:
            debug_print(f"üßπ Deleting navigation message {msg_id}...")
            await bot.delete_message(chat_id, msg_id)
            deleted_count += 1
            debug_print(f"‚úÖ Deleted navigation message {msg_id}")
        except Exception as e:
            debug_print(f"‚ùå Failed to delete navigation message {msg_id}: {e}", "WARN")

    clear_all_navigation_messages(user_id)
    debug_print(f"üßπ NAVIGATION CLEANUP COMPLETE: Deleted {deleted_count}/{len(message_ids)} navigation messages")


async def cleanup_order_files(bot, chat_id: int, user_id: int, order_id: int) -> None:
    """–£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    debug_print(f"üßπ CLEANUP START: user {user_id}, order {order_id}")
    message_ids = get_order_file_messages(user_id, order_id)
    debug_print(f"üßπ Found {len(message_ids)} messages to delete: {list(message_ids)}")

    deleted_count = 0
    for msg_id in message_ids:
        try:
            debug_print(f"üßπ Deleting message {msg_id}...")
            await bot.delete_message(chat_id, msg_id)
            deleted_count += 1
            debug_print(f"‚úÖ Deleted message {msg_id}")
        except Exception as e:
            debug_print(f"‚ùå Failed to delete message {msg_id}: {e}", "WARN")

    clear_order_file_messages(user_id, order_id)
    debug_print(f"üßπ CLEANUP COMPLETE: Deleted {deleted_count}/{len(message_ids)} messages for order {order_id}")
    debug_print(f"üßπ Cleared tracking for user {user_id}, order {order_id}")


async def cleanup_all_user_order_files(bot, chat_id: int, user_id: int) -> None:
    """–£–¥–∞–ª—è–µ–º –í–°–ï —Ñ–∞–π–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤)"""
    debug_print(f"üßπ UNIVERSAL CLEANUP START: user {user_id}")

    files_to_delete = clear_all_user_files(user_id)

    deleted_count = 0
    total_count = 0

    for order_id, message_ids in files_to_delete.items():
        debug_print(f"üßπ Order {order_id}: {len(message_ids)} files to delete")

        for msg_id in message_ids:
            total_count += 1
            try:
                await bot.delete_message(chat_id, msg_id)
                deleted_count += 1
                debug_print(f"‚úÖ Deleted file message {msg_id} (order {order_id})")
            except Exception as e:
                debug_print(f"‚ùå Failed to delete file message {msg_id}: {e}", "WARN")

    debug_print(f"üßπ UNIVERSAL CLEANUP COMPLETE: Deleted {deleted_count}/{total_count} file messages")


async def update_navigation_message(bot, chat_id: int, user_id: int, text: str,
                                    reply_markup: InlineKeyboardMarkup = None) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    last_message_id = get_navigation_message_id(user_id)
    debug_print(f"Updating navigation for user {user_id}, last_message_id: {last_message_id}")

    if last_message_id:
        try:
            debug_print(f"Attempting to edit message {last_message_id}")
            await bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=last_message_id,
                reply_markup=reply_markup
            )
            debug_print(f"Successfully edited message {last_message_id}")
            add_navigation_message(user_id, last_message_id)
            return True
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                debug_print(f"Message {last_message_id} content is the same, no update needed")
                return True
            else:
                debug_print(f"Failed to edit message {last_message_id}: {e}", "WARN")
                remove_navigation_message_id(user_id)
        except Exception as e:
            debug_print(f"Failed to edit message {last_message_id}: {e}", "WARN")
            remove_navigation_message_id(user_id)

    debug_print(f"Sending new navigation message for user {user_id}")
    try:
        message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup
        )
        track_navigation_message(user_id, message.message_id)
        debug_print(f"Sent new message with ID: {message.message_id}")
        return True
    except Exception as e:
        debug_print(f"Failed to send new message: {e}", "ERROR")
        return False


async def safe_edit_message(bot, chat_id: int, message_id: int, text: str,
                            reply_markup: InlineKeyboardMarkup = None) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=reply_markup
        )
        return True
    except (TelegramBadRequest, Exception) as e:
        debug_print(f"Failed to edit message {message_id}: {e}", "WARN")
        return False


async def safe_delete_message(bot, chat_id: int, message_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.delete_message(chat_id, message_id)
        return True
    except Exception as e:
        debug_print(f"Failed to delete message {message_id}: {e}", "WARN")
        return False
