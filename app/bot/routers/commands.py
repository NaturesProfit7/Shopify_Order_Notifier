# app/bot/routers/commands.py - –†–ï–§–ê–ö–¢–û–†–ò–ù–ì
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from app.db import get_session
from app.models import Order, OrderStatus
from datetime import datetime

from .shared import (
    debug_print,
    track_navigation_message,
    update_navigation_message,
    main_menu_keyboard,
    stats_keyboard,
    back_to_menu_keyboard
)

router = Router()


async def send_main_menu(bot, chat_id: int, user_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ–≥–æ"""
    message = await bot.send_message(
        chat_id=chat_id,
        text="üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_menu_keyboard()
    )

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    track_navigation_message(user_id, message.message_id)


@router.message(CommandStart())
async def on_start(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    debug_print(f"/start command from user {msg.from_user.id}")

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await msg.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await msg.answer(
        "ü§ñ <b>–ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π!</b>\n\n"
        "–ö–µ—Ä—É–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ–≥–æ
    await send_main_menu(msg.bot, msg.chat.id, msg.from_user.id)


@router.message(Command(commands=["menu"]))
async def on_menu_command(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /menu"""
    debug_print(f"/menu command from user {msg.from_user.id}")

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await msg.delete()
    except Exception as e:
        debug_print(f"Failed to delete /menu command: {e}", "WARN")

    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success = await update_navigation_message(
        msg.bot,
        msg.chat.id,
        msg.from_user.id,
        "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        main_menu_keyboard()
    )

    debug_print(f"/menu update success: {success}")


@router.message(Command(commands=["stats"]))
async def on_stats_command(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    debug_print(f"/stats command from user {msg.from_user.id}")

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await msg.delete()
    except:
        pass

    with get_session() as session:
        total = session.query(Order).count()
        new = session.query(Order).filter(Order.status == OrderStatus.NEW).count()
        waiting = session.query(Order).filter(Order.status == OrderStatus.WAITING_PAYMENT).count()
        paid = session.query(Order).filter(Order.status == OrderStatus.PAID).count()
        cancelled = session.query(Order).filter(Order.status == OrderStatus.CANCELLED).count()

        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        today_count = session.query(Order).filter(Order.created_at >= today).count()

        current_time = datetime.now().strftime('%H:%M')

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>

üì¶ –í—Å—å–æ–≥–æ: {total}
üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {today_count}

<b>–ó–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏:</b>
üÜï –ù–æ–≤–∏—Ö: {new}
‚è≥ –û—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É: {waiting}
‚úÖ –û–ø–ª–∞—á–µ–Ω–∏—Ö: {paid}
‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–∏—Ö: {cancelled}

<i>–û–Ω–æ–≤–ª–µ–Ω–æ: {current_time}</i>"""

        message = await msg.answer(
            stats_text,
            reply_markup=stats_keyboard()
        )

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        track_navigation_message(msg.from_user.id, message.message_id)


@router.message(Command(commands=["pending"]))
async def on_pending_command(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /pending - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    debug_print(f"/pending command from user {msg.from_user.id}")

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await msg.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–∫–ª—é—á–∏–º—Å—è –Ω–∞ pending
    await send_main_menu(msg.bot, msg.chat.id, msg.from_user.id)

    # –ß–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ pending —Å–ø–∏—Å–æ–∫
    import asyncio
    await asyncio.sleep(0.3)

    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ"
        success = await update_navigation_message(
            msg.bot,
            msg.chat.id,
            msg.from_user.id,
            "üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å...",
            None
        )

        if success:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ navigation
            from .navigation import on_orders_list

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback
            class FakeCallback:
                def __init__(self):
                    self.data = "orders:list:pending:offset=0"
                    self.from_user = msg.from_user
                    self.bot = msg.bot
                    self.message = type('obj', (object,), {'chat': msg.chat})()

                async def answer(self, text=None, show_alert=False):
                    pass

            fake_callback = FakeCallback()
            await on_orders_list(fake_callback)

    except Exception as e:
        debug_print(f"Error switching to pending: {e}", "ERROR")


@router.message(Command(commands=["help"]))
async def on_help_command(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    debug_print(f"/help command from user {msg.from_user.id}")

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await msg.delete()
    except:
        pass

    help_text = """üìñ <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:</b>

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/menu - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
/pending - –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

<b>–§—É–Ω–∫—Ü—ñ—ó:</b>
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø–∏—Å–∫—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å
‚Ä¢ –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å
‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF —Ç–∞ VCF —Ñ–∞–π–ª—ñ–≤
‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ –¥–ª—è –æ–ø–ª–∞—Ç–∏

<b>–°—Ç–∞—Ç—É—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>
üÜï –ù–æ–≤–∏–π - —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞–∫–∞–∑
‚è≥ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É - –∑–≤'—è–∑–∞–ª–∏—Å—å –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
‚úÖ –û–ø–ª–∞—á–µ–Ω–æ - –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω–∏–π
‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ - –∑–∞–∫–∞–∑ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏."""

    message = await msg.answer(
        help_text,
        reply_markup=back_to_menu_keyboard()
    )

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    track_navigation_message(msg.from_user.id, message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def on_any_message(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
    if not msg.text or not msg.text.startswith('/'):
        try:
            await msg.delete()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = await msg.answer(
            "üí¨ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏",
            reply_markup=back_to_menu_keyboard()
        )

        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        import asyncio
        await asyncio.sleep(5)
        try:
            await reminder.delete()
        except:
            pass