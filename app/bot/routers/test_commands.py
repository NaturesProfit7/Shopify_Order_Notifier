# app/bot/routers/test_commands.py - –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–•
"""–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from .shared import debug_print, check_permission

router = Router()


@router.message(Command("test_hourly"))
async def test_hourly_reminder(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ—á–∞—Å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    if not check_permission(message.from_user.id):
        return

    debug_print(f"Manual hourly reminder test by authorized user {message.from_user.id}")

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
    except:
        pass

    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏
        from app.bot.main import get_bot_instance
        bot_instance = get_bot_instance()

        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        original_method = bot_instance._is_working_hours
        bot_instance._is_working_hours = lambda: True

        await bot_instance._check_new_orders()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        bot_instance._is_working_hours = original_method

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è chat_id
        await bot_instance._send_to_managers(
            "‚úÖ –¢–µ—Å—Ç –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏)",
            None,
        )

    except Exception as e:
        debug_print(f"Error in hourly test: {e}", "ERROR")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {str(e)}")


@router.message(Command("test_daily"))
async def test_daily_reminder(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    if not check_permission(message.from_user.id):
        return

    debug_print(f"Manual daily reminder test by authorized user {message.from_user.id}")

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
    except:
        pass

    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        from app.bot.main import get_bot_instance
        bot_instance = get_bot_instance()

        await bot_instance._check_payment_reminders()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        await bot_instance._send_to_managers(
            "‚úÖ –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω",
            None,
        )

    except Exception as e:
        debug_print(f"Error in daily test: {e}", "ERROR")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {str(e)}")


@router.message(Command("test_reminder"))
async def test_individual_reminder(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    if not check_permission(message.from_user.id):
        return

    debug_print(f"Manual individual reminder test by authorized user {message.from_user.id}")

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
    except:
        pass

    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        from app.bot.main import get_bot_instance
        bot_instance = get_bot_instance()

        await bot_instance._check_reminders()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        await bot_instance._send_to_managers(
            "‚úÖ –¢–µ—Å—Ç —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω",
            None,
        )

    except Exception as e:
        debug_print(f"Error in reminder test: {e}", "ERROR")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {str(e)}")


@router.message(Command("test_time"))
async def test_working_hours(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    if not check_permission(message.from_user.id):
        return

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
    except:
        pass

    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        from app.bot.main import get_bot_instance
        from datetime import datetime
        import pytz

        bot_instance = get_bot_instance()
        is_working = bot_instance._is_working_hours()

        kiev_tz = pytz.timezone("Europe/Kyiv")
        now_kiev = datetime.now(kiev_tz)

        status = "‚úÖ –†–æ–±–æ—á–∏–π —á–∞—Å" if is_working else "‚ùå –ù–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å"
        time_str = now_kiev.strftime("%H:%M")

        info = await message.answer(
            f"üïê <b>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</b> {time_str} (–ö–∏—ó–≤)\n"
            f"üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"‚è∞ <b>–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏:</b> 10:00 - 22:00"
        )

        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        import asyncio
        await asyncio.sleep(5)
        try:
            await info.delete()
        except:
            pass

    except Exception as e:
        debug_print(f"Error in time test: {e}", "ERROR")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {str(e)}")


@router.message(Command("get_order"))
async def get_order_json(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å JSON –∑–∞–∫–∞–∑–∞ - –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    if not check_permission(message.from_user.id):
        return

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
    except:
        pass

    try:
        parts = message.text.split()
        if len(parts) != 2:
            error_msg = await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /get_order ORDER_ID")
            import asyncio
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        order_id = int(parts[1])
        debug_print(f"Getting JSON for order {order_id} by authorized user {message.from_user.id}")

        from app.services.shopify_service import get_order
        order_data = get_order(order_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        import json
        filename = f"order_{order_id}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(order_data, f, indent=2, ensure_ascii=False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        shipping = order_data.get("shipping_address", {})
        billing = order_data.get("billing_address", {})

        info_text = f"JSON –∑–∞–∫–∞–∑–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}\n\n"

        if shipping and billing:
            ship_addr = f"{shipping.get('address1', '')} {shipping.get('city', '')}".strip()
            bill_addr = f"{billing.get('address1', '')} {billing.get('city', '')}".strip()

            if ship_addr != bill_addr:
                info_text += "üì¶ –†–∞–∑–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:\n"
                info_text += f"Shipping: {ship_addr}\n"
                info_text += f"Billing: {bill_addr}"
            else:
                info_text += "üìç –ê–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ"

        result_msg = await message.answer(info_text)

        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        import asyncio
        await asyncio.sleep(10)
        try:
            await result_msg.delete()
        except:
            pass

    except ValueError:
        error_msg = await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π ID –∑–∞–∫–∞–∑–∞")
        import asyncio
        await asyncio.sleep(3)
        try:
            await error_msg.delete()
        except:
            pass
    except Exception as e:
        debug_print(f"Error getting order JSON: {e}", "ERROR")
        error_msg = await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        import asyncio
        await asyncio.sleep(5)
        try:
            await error_msg.delete()
        except:
            pass


@router.message(Command("test_help"))
async def test_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º - –ü–û–õ–ù–û–ï –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    if not check_permission(message.from_user.id):
        return

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
    except:
        pass

    help_text = """üß™ <b>–¢–µ—Å—Ç–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:</b>

<b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω—å:</b>
/test_hourly - —Ç–µ—Å—Ç –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (NEW –∑–∞–∫–∞–∑—ã)
/test_daily - —Ç–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (WAITING –∑–∞–∫–∞–∑—ã)  
/test_reminder - —Ç–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

<b>–£—Ç–∏–ª—ñ—Ç–∏:</b>
/test_time - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É
/get_order ORDER_ID - –æ—Ç—Ä–∏–º–∞—Ç–∏ JSON –∑–∞–∫–∞–∑–∞
/test_help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

<b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b>
‚Ä¢ –ö–æ–º–∞–Ω–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
‚Ä¢ –õ–æ–≥–∏ —Ç–µ—Å—Ç—ñ–≤ –¥–∏–≤—ñ—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—ñ —Å–µ—Ä–≤–µ—Ä–∞"""

    help_msg = await message.answer(help_text)

    # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    import asyncio
    await asyncio.sleep(10)
    try:
        await help_msg.delete()
    except:
        pass