# app/bot/routers/management.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""–†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.db import get_session
from app.models import Order, OrderStatus, OrderStatusHistory

from .shared import (
    debug_print,
    check_permission,
    update_navigation_message,
    reminder_time_keyboard,
    track_order_file_message
)

router = Router()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
class CommentStates(StatesGroup):
    waiting_for_comment = State()


@router.callback_query(F.data.contains(":comment"))
async def on_comment_button(callback: CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ '–ö–æ–º–µ–Ω—Ç–∞—Ä' - –∑–∞–ø—É—Å–∫ FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])
    debug_print(f"Comment request for order {order_id} from user {callback.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        display_order_no = order.order_number or order.id

    # –ó–∞–ø—É—Å–∫–∞–µ–º FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(CommentStates.waiting_for_comment)
    await state.update_data(order_id=order_id, original_message_id=callback.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ö–û–†–û–¢–ö–ò–ú –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    prompt_msg = await callback.bot.send_message(
        callback.message.chat.id,
        f"üí¨ –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{display_order_no}:"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    debug_print(f"Comment prompt sent with ID: {prompt_msg.message_id}")

    await callback.answer("üí¨ –û—á—ñ–∫—É—é –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä")


@router.message(CommentStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    debug_print(f"Received comment message from user {message.from_user.id}")

    if not check_permission(message.from_user.id):
        debug_print("Permission denied for comment")
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        await state.clear()
        return

    debug_print("Getting state data...")
    data = await state.get_data()
    order_id = data.get("order_id")
    original_message_id = data.get("original_message_id")
    prompt_message_id = data.get("prompt_message_id")

    comment_text = message.text
    debug_print(f"Processing comment for order {order_id}: '{comment_text[:50]}...'")

    try:
        debug_print("Opening database session...")
        with get_session() as session:
            debug_print("Getting order from database...")
            order = session.get(Order, order_id)
            if not order:
                debug_print("Order not found")
                await message.reply("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                await state.clear()
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            display_order_no = order.order_number or order.id

            debug_print("Saving comment to order...")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            order.comment = comment_text

            debug_print("Creating history record...")
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history = OrderStatusHistory(
                order_id=order_id,
                old_status=order.status.value,
                new_status=order.status.value,
                changed_by_user_id=message.from_user.id,
                changed_by_username=message.from_user.username or message.from_user.first_name,
                comment=comment_text
            )
            session.add(history)

            debug_print("Committing to database...")
            session.commit()
            debug_print("Database commit successful")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
            debug_print("Updating order card message...")
            try:
                from .orders import build_order_card_message
                from .shared import order_card_keyboard

                new_text = build_order_card_message(order, detailed=True)
                keyboard = order_card_keyboard(order)

                await message.bot.edit_message_text(
                    new_text,
                    chat_id=message.chat.id,
                    message_id=original_message_id,
                    reply_markup=keyboard
                )
                debug_print("Order card updated successfully")
            except Exception as e:
                debug_print(f"Failed to update order card: {e}", "WARN")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ö–û–†–û–¢–ö–ò–ú –Ω–æ–º–µ—Ä–æ–º - –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú –∫–∞–∫ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞
            debug_print("Sending notification...")
            notification = f'‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä "{comment_text}" –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{display_order_no}'
            notification_msg = await message.bot.send_message(message.chat.id, notification)

            # –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            track_order_file_message(message.from_user.id, order_id, notification_msg.message_id)

            # –£–¥–∞–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            debug_print("Cleaning up messages...")
            try:
                if prompt_message_id:
                    await message.bot.delete_message(message.chat.id, prompt_message_id)
                    debug_print(f"Deleted prompt message {prompt_message_id}")

                await message.bot.delete_message(message.chat.id, message.message_id)
                debug_print(f"Deleted user message {message.message_id}")
            except Exception as e:
                debug_print(f"Failed to delete messages: {e}", "WARN")

    except Exception as e:
        debug_print(f"Error processing comment: {e}", "ERROR")
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {str(e)}")

    finally:
        debug_print("Clearing FSM state...")
        await state.clear()
        debug_print("Comment processing completed")


@router.callback_query(F.data.contains(":reminder"))
async def on_reminder_button(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–≥–∞–¥–∞—Ç–∏' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])
    debug_print(f"Reminder setup for order {order_id} from user {callback.from_user.id}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    keyboard = reminder_time_keyboard(order_id)

    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
    except Exception as e:
        debug_print(f"Failed to show reminder keyboard: {e}", "WARN")
        await callback.answer("‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", show_alert=True)


@router.callback_query(F.data.startswith("reminder:"))
async def handle_reminder_time(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    parts = callback.data.split(":")
    order_id = int(parts[1])
    minutes = int(parts[2])

    debug_print(f"Setting reminder for order {order_id}: {minutes} minutes")

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        order.reminder_at = datetime.utcnow() + timedelta(minutes=minutes)
        session.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        try:
            from .orders import build_order_card_message
            from .shared import order_card_keyboard

            message_text = build_order_card_message(order, detailed=True)
            keyboard = order_card_keyboard(order)

            await callback.message.edit_text(message_text, reply_markup=keyboard)
        except Exception as e:
            debug_print(f"Failed to update order card after reminder: {e}", "WARN")

        if minutes < 60:
            time_text = f"{minutes} —Ö–≤–∏–ª–∏–Ω"
        elif minutes < 1440:
            time_text = f"{minutes // 60} –≥–æ–¥–∏–Ω"
        else:
            time_text = "–∑–∞–≤—Ç—Ä–∞"

        await callback.answer(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {time_text}")


@router.callback_query(F.data.contains(":back"))
async def on_back_to_order(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split(":")[1])
    debug_print(f"Back to order {order_id} from user {callback.from_user.id}")

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞
        try:
            from .orders import build_order_card_message
            from .shared import order_card_keyboard

            message_text = build_order_card_message(order, detailed=True)
            keyboard = order_card_keyboard(order)

            await callback.message.edit_text(message_text, reply_markup=keyboard)
        except Exception as e:
            debug_print(f"Failed to return to order card: {e}", "WARN")

    await callback.answer()