# app/bot/handlers/commands.py
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from app.db import get_session
from app.models import Order, OrderStatus
from datetime import datetime, timedelta

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "/pending - –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "/today - –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
    )


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    with get_session() as session:
        total = session.query(Order).count()
        new = session.query(Order).filter(Order.status == OrderStatus.NEW).count()
        waiting = session.query(Order).filter(Order.status == OrderStatus.WAITING_PAYMENT).count()
        paid = session.query(Order).filter(Order.status == OrderStatus.PAID).count()
        cancelled = session.query(Order).filter(Order.status == OrderStatus.CANCELLED).count()

        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>

–í—Å—å–æ–≥–æ: {total}
üÜï –ù–æ–≤–∏—Ö: {new}
‚è≥ –û—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É: {waiting}
‚úÖ –û–ø–ª–∞—á–µ–Ω–∏—Ö: {paid}
‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–∏—Ö: {cancelled}
"""

        await message.answer(stats_text)


@router.message(Command("pending"))
async def cmd_pending(message: Message):
    """–°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    with get_session() as session:
        orders = session.query(Order).filter(
            Order.status.in_([OrderStatus.NEW, OrderStatus.WAITING_PAYMENT])
        ).order_by(Order.created_at.desc()).limit(10).all()

        if not orders:
            await message.answer("‚ú® –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω—ñ!")
            return

        text = "üìã <b>–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        for order in orders:
            order_no = order.order_number or order.id
            customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip()
            status = "üÜï –ù–æ–≤–∏–π" if order.status == OrderStatus.NEW else "‚è≥ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É"
            text += f"‚Ä¢ ‚Ññ{order_no} - {customer or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'} - {status}\n"

        await message.answer(text)


@router.message(Command("today"))
async def cmd_today(message: Message):
    """–ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    with get_session() as session:
        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        orders = session.query(Order).filter(
            Order.created_at >= today
        ).order_by(Order.created_at.desc()).all()

        if not orders:
            await message.answer("üì≠ –°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å —â–µ –Ω–µ –±—É–ª–æ")
            return

        text = f"üìÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({len(orders)} —à—Ç):</b>\n\n"

        for order in orders[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            order_no = order.order_number or order.id
            customer = f"{order.customer_first_name or ''} {order.customer_last_name or ''}".strip()
            status_emoji = {
                OrderStatus.NEW: "üÜï",
                OrderStatus.WAITING_PAYMENT: "‚è≥",
                OrderStatus.PAID: "‚úÖ",
                OrderStatus.CANCELLED: "‚ùå"
            }.get(order.status, "")

            text += f"{status_emoji} ‚Ññ{order_no} - {customer or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n"

        if len(orders) > 15:
            text += f"\n<i>...—Ç–∞ —â–µ {len(orders) - 15} –∑–∞–º–æ–≤–ª–µ–Ω—å</i>"

        await message.answer(text)