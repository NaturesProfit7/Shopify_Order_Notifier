# app/bot/handlers/callbacks.py
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.db import get_session
from app.models import Order, OrderStatus, OrderStatusHistory
from app.bot.keyboards import get_order_keyboard, get_reminder_keyboard
from app.bot.services.message_builder import build_order_message
import os

router = Router()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
class CommentStates(StatesGroup):
    waiting_for_comment = State()


def check_permission(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    allowed_ids = os.getenv("TELEGRAM_ALLOWED_USER_IDS", "")
    allowed = [int(uid.strip()) for uid in allowed_ids.split(",") if uid.strip()]
    return user_id in allowed


@router.callback_query(F.data.startswith("order:"))
async def handle_order_action(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
        return

    order_id = int(parts[1])
    action = parts[2]

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        old_status = order.status

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        if action == "contacted":
            if order.status != OrderStatus.NEW:
                await callback.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", show_alert=True)
                return

            order.status = OrderStatus.WAITING_PAYMENT
            order.processed_by_user_id = callback.from_user.id
            order.processed_by_username = callback.from_user.username or callback.from_user.first_name

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history = OrderStatusHistory(
                order_id=order_id,
                old_status=old_status.value,
                new_status=OrderStatus.WAITING_PAYMENT.value,
                changed_by_user_id=callback.from_user.id,
                changed_by_username=callback.from_user.username or callback.from_user.first_name
            )
            session.add(history)
            session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = build_order_message(order)
            new_keyboard = get_order_keyboard(order)

            await callback.message.edit_text(
                new_text,
                reply_markup=new_keyboard
            )

            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ: –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            notification = (
                f"üìù <b>–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É</b>\n"
                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}\n"
                f"–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É\n"
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä: @{callback.from_user.username or callback.from_user.first_name}"
            )
            await callback.bot.send_message(callback.message.chat.id, notification)

        elif action == "paid":
            if order.status != OrderStatus.WAITING_PAYMENT:
                await callback.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", show_alert=True)
                return

            order.status = OrderStatus.PAID

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history = OrderStatusHistory(
                order_id=order_id,
                old_status=old_status.value,
                new_status=OrderStatus.PAID.value,
                changed_by_user_id=callback.from_user.id,
                changed_by_username=callback.from_user.username or callback.from_user.first_name
            )
            session.add(history)
            session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = build_order_message(order)
            new_keyboard = get_order_keyboard(order)

            await callback.message.edit_text(
                new_text,
                reply_markup=new_keyboard
            )

            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ: –û–ø–ª–∞—á–µ–Ω–æ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = (
                f"üí∞ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ!</b>\n"
                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}\n"
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä: @{callback.from_user.username or callback.from_user.first_name}"
            )
            await callback.bot.send_message(callback.message.chat.id, notification)

        elif action == "cancel":
            order.status = OrderStatus.CANCELLED

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history = OrderStatusHistory(
                order_id=order_id,
                old_status=old_status.value,
                new_status=OrderStatus.CANCELLED.value,
                changed_by_user_id=callback.from_user.id,
                changed_by_username=callback.from_user.username or callback.from_user.first_name
            )
            session.add(history)
            session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = build_order_message(order)
            new_keyboard = get_order_keyboard(order)

            await callback.message.edit_text(
                new_text,
                reply_markup=new_keyboard
            )

            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = (
                f"‚ùå <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n"
                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}\n"
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä: @{callback.from_user.username or callback.from_user.first_name}"
            )
            await callback.bot.send_message(callback.message.chat.id, notification)

        elif action == "comment":
            # –ó–∞–ø—É—Å–∫–∞–µ–º FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            await state.set_state(CommentStates.waiting_for_comment)
            await state.update_data(order_id=order_id, message_id=callback.message.message_id)

            await callback.answer("üí¨ –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            await callback.bot.send_message(
                callback.message.chat.id,
                f"üí¨ –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}:",
                reply_to_message_id=callback.message.message_id
            )

        elif action == "reminder":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            keyboard = get_reminder_keyboard(order_id)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer("‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")

        elif action == "show":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = build_order_message(order, detailed=True)
            await callback.answer(details, show_alert=True)


@router.callback_query(F.data.startswith("reminder:"))
async def handle_reminder_time(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""

    if not check_permission(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó", show_alert=True)
        return

    parts = callback.data.split(":")
    order_id = int(parts[1])
    minutes = int(parts[2])

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        order.reminder_at = datetime.utcnow() + timedelta(minutes=minutes)
        session.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = get_order_keyboard(order)
        await callback.message.edit_reply_markup(reply_markup=keyboard)

        await callback.answer(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω")


@router.message(CommentStates.waiting_for_comment)
async def process_comment(message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""

    if not check_permission(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó")
        await state.clear()
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    original_message_id = data.get("message_id")

    with get_session() as session:
        order = session.get(Order, order_id)
        if not order:
            await message.reply("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        order.comment = message.text

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history = OrderStatusHistory(
            order_id=order_id,
            old_status=order.status.value,
            new_status=order.status.value,
            changed_by_user_id=message.from_user.id,
            changed_by_username=message.from_user.username or message.from_user.first_name,
            comment=message.text
        )
        session.add(history)
        session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_text = build_order_message(order)
        keyboard = get_order_keyboard(order)

        try:
            await message.bot.edit_message_text(
                new_text,
                chat_id=message.chat.id,
                message_id=original_message_id,
                reply_markup=keyboard
            )
        except:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ

        await message.reply(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.order_number or order.id}")

    await state.clear()