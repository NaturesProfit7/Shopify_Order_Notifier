#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ aiogram
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
root_dir = Path(__file__).resolve().parent
sys.path.insert(0, str(root_dir))


async def test_fsm():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É FSM"""

    print("üß™ –¢–ï–°–¢ FSM –°–û–°–¢–û–Ø–ù–ò–ô")
    print("=" * 50)

    try:
        from aiogram.fsm.storage.memory import MemoryStorage
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.state import State, StatesGroup

        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã aiogram FSM –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        class TestStates(StatesGroup):
            waiting = State()

        # –°–æ–∑–¥–∞–µ–º storage
        storage = MemoryStorage()
        print("‚úÖ MemoryStorage —Å–æ–∑–¥–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        class FakeBot:
            def __init__(self):
                self.id = 123

        class FakeUser:
            def __init__(self):
                self.id = 456

        class FakeChat:
            def __init__(self):
                self.id = 789

        bot = FakeBot()
        user = FakeUser()
        chat = FakeChat()

        # –°–æ–∑–¥–∞–µ–º FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = FSMContext(
            storage=storage,
            key=storage.key(bot.id, chat.id, user.id)
        )

        print("‚úÖ FSMContext —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        await context.set_state(TestStates.waiting)

        state = await context.get_state()
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {state}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        await context.update_data(test_key="test_value", number=42)

        data = await context.get_data()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É...")
        await context.clear()

        state_after = await context.get_state()
        data_after = await context.get_data()

        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {state_after}")
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {data_after}")

        print("\n‚úÖ FSM —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FSM: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False


async def test_router_order():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ"""

    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–†–Ø–î–ö–ê –†–û–£–¢–ï–†–û–í")
    print("=" * 50)

    try:
        from app.bot.main import get_bot_instance

        bot_instance = get_bot_instance()
        dp = bot_instance.dp

        print("‚úÖ –ü–æ–ª—É—á–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
        routers = dp._routers if hasattr(dp, '_routers') else []

        print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: {len(routers)}")

        for i, router in enumerate(routers):
            router_name = getattr(router, '__module__', 'Unknown')
            print(f"  {i + 1}. {router_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ management –∏–¥–µ—Ç –ø–µ—Ä–µ–¥ orders
        management_index = None
        orders_index = None

        for i, router in enumerate(routers):
            module = getattr(router, '__module__', '')
            if 'management' in module:
                management_index = i
            elif 'orders' in module:
                orders_index = i

        if management_index is not None and orders_index is not None:
            if management_index < orders_index:
                print("‚úÖ –†–æ—É—Ç–µ—Ä management –∏–¥–µ—Ç –ø–µ—Ä–µ–¥ orders - –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå –†–æ—É—Ç–µ—Ä orders –∏–¥–µ—Ç –ø–µ—Ä–µ–¥ management - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                return False
        else:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–æ—É—Ç–µ—Ä—ã management –∏–ª–∏ orders")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º FSM
    fsm_ok = await test_fsm()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    router_ok = await test_router_order()

    print(f"\n{'=' * 50}")
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"üîÑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ OK' if fsm_ok else '‚ùå FAIL'}")
    print(f"üîÄ –ü–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤: {'‚úÖ OK' if router_ok else '‚ùå FAIL'}")

    if fsm_ok and router_ok:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –±–æ—Ç–µ:")
        print("1. /start ‚Üí –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑")
        print("2. –ù–∞–∂–º–∏—Ç–µ 'üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä'")
        print("3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        print("\nüîç –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç:")
        print("- üìù === COMMENT MESSAGE HANDLER TRIGGERED ===")
        print("- ‚úÖ Comment processing completed successfully")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π FSM –∏–ª–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏")
        print("üìù –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º –≤—ã—à–µ")


if __name__ == "__main__":
    asyncio.run(main())