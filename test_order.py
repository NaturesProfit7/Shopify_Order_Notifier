#!/usr/bin/env python
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Shopify.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_order.py 6417067999535
    python test_order.py 6417067999535 --force
    python test_order.py 6417067999535 --details
    python test_order.py 6417067999535 --host http://example.com:8001
"""
import argparse
import base64
import hashlib
import hmac
import json
import requests
import sys
import time
from pathlib import Path
from typing import Optional, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
root_dir = Path(__file__).resolve().parent
if root_dir.name == 'app':
    root_dir = root_dir.parent
sys.path.insert(0, str(root_dir))

import os
from dotenv import load_dotenv

load_dotenv(root_dir / '.env')


class OrderTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤."""

    def __init__(self, host: str = "http://localhost:8001"):
        self.host = host.rstrip('/')
        self.webhook_url = f"{self.host}/webhooks/shopify/orders"
        self.secret = os.getenv("SHOPIFY_WEBHOOK_SECRET", "test_secret")

    def get_order_from_shopify(self, order_id: int) -> Optional[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ Shopify API."""
        print(f"üì• –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ #{order_id} –∏–∑ Shopify...")

        try:
            from app.services.shopify_service import get_order
            order_data = get_order(order_id)

            customer = order_data.get('customer', {})
            name = f"{customer.get('first_name', '')} {customer.get('last_name', '')}".strip()

            print(f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω:")
            print(f"   ‚Ä¢ –ù–æ–º–µ—Ä: {order_data.get('name', order_data.get('order_number'))}")
            print(f"   ‚Ä¢ –ö–ª–∏–µ–Ω—Ç: {name or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"   ‚Ä¢ –°—É–º–º–∞: {order_data.get('total_price')} {order_data.get('currency', 'UAH')}")

            return order_data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return None

    def check_if_processed(self, order_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."""
        try:
            from app.db import get_session
            from app.models import Order

            with get_session() as session:
                order = session.query(Order).filter(Order.id == order_id).first()
                return order is not None and order.is_processed
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î: {e}")
            return False

    def reset_order(self, order_id: int) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞."""
        try:
            from app.db import get_session
            from app.models import Order

            with get_session() as session:
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    order.is_processed = False
                    session.commit()
                    print(f"üîÑ –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
                    return True
                else:
                    print(f"‚ÑπÔ∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ)")
                    return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞: {e}")
            return False

    def send_webhook(self, order_data: Dict[Any, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
        # –°–æ–∑–¥–∞–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
        body = json.dumps(order_data, ensure_ascii=False, separators=(",", ":")).encode("utf-8")
        digest = hmac.new(self.secret.encode("utf-8"), body, hashlib.sha256).digest()
        signature = base64.b64encode(digest).decode("utf-8")

        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –Ω–∞ {self.webhook_url}")

        try:
            response = requests.post(
                self.webhook_url,
                data=body,
                headers={
                    "Content-Type": "application/json",
                    "X-Shopify-Hmac-Sha256": signature,
                },
                timeout=60  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            )

            print(f"\nüì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
            print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {response.status_code}")

            if response.status_code == 200:
                result = response.json()
                print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

                if result.get("status") == "duplicate":
                    print("\n‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ")
                    print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --force –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    return False
                else:
                    print("\n‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                    print("   üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ 3 —Å–æ–æ–±—â–µ–Ω–∏—è:")
                    print("      1. PDF —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞")
                    print("      2. VCF –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞")
                    print("      3. –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                    return True
            else:
                print(f"   ‚Ä¢ –û—à–∏–±–∫–∞: {response.text}")
                return False

        except requests.exceptions.ConnectionError:
            print("\n‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
            print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}")
            print("\n   –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("   uvicorn app.main:app --host 0.0.0.0 --port 8001")
            return False

        except requests.exceptions.Timeout:
            print("\n‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
            return False

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    def show_order_details(self, order_data: Dict[Any, Any]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ."""
        print("\n" + "=" * 50)
        print("üìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê")
        print("=" * 50)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüè∑Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ:")
        print(f"   ‚Ä¢ ID: {order_data.get('id')}")
        print(f"   ‚Ä¢ –ù–æ–º–µ—Ä: {order_data.get('order_number')}")
        print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {order_data.get('name')}")
        print(f"   ‚Ä¢ –î–∞—Ç–∞: {order_data.get('created_at')}")

        # –ö–ª–∏–µ–Ω—Ç
        customer = order_data.get('customer', {})
        if customer:
            print(f"\nüë§ –ö–ª–∏–µ–Ω—Ç:")
            print(f"   ‚Ä¢ –ò–º—è: {customer.get('first_name')} {customer.get('last_name')}")
            print(f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {customer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   ‚Ä¢ Email: {customer.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

        # –î–æ—Å—Ç–∞–≤–∫–∞
        shipping = order_data.get('shipping_address', {})
        if shipping:
            print(f"\nüì¶ –î–æ—Å—Ç–∞–≤–∫–∞:")
            print(f"   ‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {shipping.get('first_name')} {shipping.get('last_name')}")
            print(f"   ‚Ä¢ –ê–¥—Ä–µ—Å: {shipping.get('address1')}")
            if shipping.get('address2'):
                print(f"   ‚Ä¢ –ê–¥—Ä–µ—Å 2: {shipping.get('address2')}")
            print(f"   ‚Ä¢ –ì–æ—Ä–æ–¥: {shipping.get('city')}")
            print(f"   ‚Ä¢ –ò–Ω–¥–µ–∫—Å: {shipping.get('zip')}")
            print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {shipping.get('country')}")
            print(f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {shipping.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

        # –¢–æ–≤–∞—Ä—ã
        items = order_data.get('line_items', [])
        if items:
            print(f"\nüõçÔ∏è –¢–æ–≤–∞—Ä—ã ({len(items)} —à—Ç.):")
            for i, item in enumerate(items, 1):
                print(f"   {i}. {item.get('title')}")
                print(f"      ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('quantity')}")
                print(f"      ‚Ä¢ –¶–µ–Ω–∞: {item.get('price')} {order_data.get('currency', 'UAH')}")

                # –°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
                props = item.get('properties', [])
                if props:
                    print(f"      ‚Ä¢ –°–≤–æ–π—Å—Ç–≤–∞:")
                    for prop in props:
                        if not str(prop.get('name', '')).startswith('_'):
                            print(f"        - {prop.get('name')}: {prop.get('value')}")

        # –ò—Ç–æ–≥–æ
        print(f"\nüí∞ –ò—Ç–æ–≥–æ:")
        print(f"   ‚Ä¢ –°—É–º–º–∞: {order_data.get('total_price')} {order_data.get('currency', 'UAH')}")

        print("\n" + "=" * 50)

    def test_order(self, order_id: int, force: bool = False, show_details: bool = False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
        print("=" * 50)
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê #{order_id}")
        print("=" * 50)

        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ Shopify
        order_data = self.get_order_from_shopify(order_id)
        if not order_data:
            return False

        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if show_details:
            self.show_order_details(order_data)

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if not force:
            if self.check_if_processed(order_id):
                print(f"\n‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --force –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                response = input("\n   –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/n): ")
                if response.lower() != 'y':
                    print("   –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return False
                force = True

        # 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if force:
            if not self.reset_order(order_id):
                return False
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ë–î

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
        return self.send_webhook(order_data)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ Shopify",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python test_order.py 6417067999535
  python test_order.py 6417067999535 --force
  python test_order.py 6417067999535 --details
  python test_order.py 6417067999535 --host http://production.com:8001
        """
    )

    parser.add_argument(
        "order_id",
        type=int,
        help="ID –∑–∞–∫–∞–∑–∞ –∏–∑ Shopify"
    )

    parser.add_argument(
        "--force", "-f",
        action="store_true",
        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
    )

    parser.add_argument(
        "--details", "-d",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"
    )

    parser.add_argument(
        "--host",
        default="http://localhost:8001",
        help="–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8001)"
    )

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    tester = OrderTester(host=args.host)
    success = tester.test_order(
        order_id=args.order_id,
        force=args.force,
        show_details=args.details
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()