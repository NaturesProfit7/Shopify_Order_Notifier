#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
root_dir = Path(__file__).resolve().parent
sys.path.insert(0, str(root_dir))


def test_with_real_order():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º –∏–∑ Shopify"""

    print("üß™ –¢–ï–°–¢ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ê–î–†–ï–°–û–í")
    print("=" * 50)

    # ID –∑–∞–∫–∞–∑–∞ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    order_id = 6435861004591

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ Shopify
        from app.services.shopify_service import get_order
        print(f"üì• –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ #{order_id}...")
        order_data = get_order(order_id)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
        from app.services.address_utils import (
            get_delivery_and_contact_info,
            addresses_are_same,
            build_delivery_address_text,
            get_contact_name,
            get_contact_phone_e164
        )

        shipping = order_data.get('shipping_address', {})
        billing = order_data.get('billing_address', {})

        print(f"\nüìã –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
        print(f"Shipping: {shipping.get('first_name')} {shipping.get('last_name')}")
        print(f"Billing: {billing.get('first_name')} {billing.get('last_name')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        are_same = addresses_are_same(shipping, billing)
        print(f"–ê–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: {are_same}")

        delivery_address, contact_info = get_delivery_and_contact_info(order_data)

        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –õ–û–ì–ò–ö–ò:")
        print(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address.get('first_name')} {delivery_address.get('last_name')}")
        print(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {contact_info.get('first_name')} {contact_info.get('last_name')}")

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è VCF
        contact_first, contact_last = get_contact_name(contact_info)
        contact_phone = get_contact_phone_e164(contact_info)

        print(f"\nüì± VCF –ö–û–ù–¢–ê–ö–¢:")
        print(f"–ò–º—è: {contact_first} {contact_last}")
        print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone}")

        # –ê–¥—Ä–µ—Å –¥–ª—è PDF
        delivery_text = build_delivery_address_text(delivery_address)
        print(f"\nüìÑ –ê–î–†–ï–° –í PDF:")
        print(delivery_text)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤
        print(f"\nüîß –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ê–ô–õ–û–í:")

        # PDF
        from app.services.pdf_service import build_order_pdf
        pdf_bytes, pdf_filename = build_order_pdf(order_data)
        with open(f"test_{pdf_filename}", "wb") as f:
            f.write(pdf_bytes)
        print(f"‚úÖ PDF: test_{pdf_filename} ({len(pdf_bytes)} –±–∞–π—Ç)")

        # VCF
        from app.services.vcf_service import build_contact_vcf
        vcf_bytes, vcf_filename = build_contact_vcf(
            first_name=contact_first,
            last_name=contact_last,
            order_id=str(order_data.get('order_number')),
            phone_e164=contact_phone
        )
        with open(f"test_{vcf_filename}", "wb") as f:
            f.write(vcf_bytes)
        print(f"‚úÖ VCF: test_{vcf_filename} ({len(vcf_bytes)} –±–∞–π—Ç)")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        from app.services.message_templates import render_simple_confirm
        order_for_message = order_data.copy()
        order_for_message['customer'] = {
            'first_name': contact_first,
            'last_name': contact_last
        }
        message = render_simple_confirm(order_for_message)
        print(f"\nüí¨ –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–£:")
        print(message)

        print(f"\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_logic_scenarios():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ª–æ–≥–∏–∫–∏"""

    print("\nüß™ –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–ï–í –õ–û–ì–ò–ö–ò")
    print("=" * 50)

    from app.services.address_utils import addresses_are_same, get_delivery_and_contact_info

    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    print("\n1Ô∏è‚É£ –û–î–ò–ù–ê–ö–û–í–´–ï –ê–î–†–ï–°–ê:")
    order1 = {
        "shipping_address": {
            "first_name": "–Ü–≤–∞–Ω", "last_name": "–ü–µ—Ç—Ä–µ–Ω–∫–æ",
            "address1": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1", "city": "–ö–∏—ó–≤", "zip": "01001"
        },
        "billing_address": {
            "first_name": "–Ü–≤–∞–Ω", "last_name": "–ü–µ—Ç—Ä–µ–Ω–∫–æ",
            "address1": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1", "city": "–ö–∏—ó–≤", "zip": "01001"
        }
    }

    delivery1, contact1 = get_delivery_and_contact_info(order1)
    print(f"‚úÖ –ê–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: {addresses_are_same(order1['shipping_address'], order1['billing_address'])}")
    print(f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞: {delivery1['first_name']} (–∏–∑ shipping)")
    print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç: {contact1['first_name']} (–∏–∑ shipping)")

    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–∞–∑–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    print("\n2Ô∏è‚É£ –†–ê–ó–ù–´–ï –ê–î–†–ï–°–ê:")
    order2 = {
        "shipping_address": {
            "first_name": "Valeriia", "last_name": "Klink",
            "phone": "0967489260"
        },
        "billing_address": {
            "first_name": "–ù–∞—Ç–∞–ª—ñ—è", "last_name": "–ö–ª—ñ–Ω–∫",
            "address1": "142", "city": "–û–¥–µ—Å–∞", "phone": "0674219291"
        }
    }

    delivery2, contact2 = get_delivery_and_contact_info(order2)
    print(f"‚úÖ –ê–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: {addresses_are_same(order2['shipping_address'], order2['billing_address'])}")
    print(f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞: {delivery2['first_name']} (–∏–∑ billing)")
    print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç: {contact2['first_name']} (–∏–∑ shipping)")

    print("\n‚úÖ –°–¶–ï–ù–ê–†–ò–ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    success = test_with_real_order()

    # –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ª–æ–≥–∏–∫–∏
    test_logic_scenarios()

    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("‚Ä¢ test_order_#1717.pdf - PDF —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏")
        print("‚Ä¢ test_contact_#1717.vcf - VCF —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞")
    else:
        print("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•")
    print("=" * 50)